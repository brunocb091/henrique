<!DOCTYPE html>
<html lang="pt-br">
  <head>


    
    <script src="%40phosphor-icons/web%402.1.2/src/index.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script type="module" crossorigin="" src="responsivo/ui/footer/index.js"></script>
    <link rel="stylesheet" crossorigin="" href="responsivo/ui/footer/index.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
    <link rel="stylesheet" href="css2?family=Roboto:wght@300;400;500;600;700&display=swap" />
    <script type="text/javascript" src="responsivo/ui/theme/guicheweb.theme.js"></script>
    <script type="text/javascript">
      const id_evento = "36213";
      const nome_evento = "Henrique e Juliano - Itajaí";
      dataLayer = [];
      dataLayer.push({
        PageType: "ProductPage",
        email: "",
        ProductID: "36213",
      });
    </script>
    <script type="application/ld+json"></script>
    <meta
      name="keywords"
      content="Henrique e Juliano - Itajaí,Estacionamento do Estádio Serra Dourada,GOIANIA/GO,hej,henriqueejuliano,goiania,sertanejo,emcasa,hejemcasa"
    />
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
    />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta property="og:locale" content="pt_BR" />
    <meta property="og:type" content="website" />

    <meta property="og:title" content="Henrique e Juliano - Itajaí - Guiche Web" />
    <meta property="og:image:type" content="image/jpg" />
    <title>Henrique e Juliano - Itajaí - Guiche Web</title>
    <meta
      name="description"
      content="Henrique e Juliano - Itajaí | 01/08/2025 | Centreventos Marejada - ITAJAI/SC. Clique aqui para comprar."
    />
    <meta
      property="og:description"
      content="Henrique e Juliano - Itajaí | 01/08/2025 | Centreventos Marejada - ITAJAI/SC. Clique aqui para comprar."
    />

    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-title" content="Guichê Web" />

    <meta
      property="og:image"
      content="https://cdn.guicheweb.com.br/gw-bucket/imagenseventos/26-05-2025_17-19-13.jpg"
    />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />

    <link rel="apple-touch-startup-image" href="nova_marca/gw_favcon.png" />
    <link rel="apple-touch-icon" href="nova_marca/gw_favcon.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="nova_marca/gw_favcon.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="nova_marca/gw_favcon.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="nova_marca/gw_favcon.png" />
    <link rel="icon" sizes="192x192" href="nova_marca/gw_favcon.png" />
    <link rel="icon" sizes="128x128" href="nova_marca/gw_favcon.png" />
    <meta name="theme-color" content="#000000" />
    <meta name="msapplication-navbutton-color" content="#000000" />

    <link defer="" href="gw-bucket/gwFramework/plugins/jquery-ui.min.css" rel="stylesheet" />
    <link defer="" href="gw-bucket/gwFramework/plugins/jquery-ui.theme.min.css" rel="stylesheet" />
    <link defer="" href="gw-bucket/gwFramework/plugins/bootstrap4.min.css" rel="stylesheet" />
    <link defer="" href="gw-bucket/gwFramework/plugins/jquery-confirm3.min.css" rel="stylesheet" />
    <link async="" href="css2-1?family=Open+Sans:wght@300&display=swap" rel="stylesheet" />

    <link href="responsivo/layout_plus/includes/css/default.min.css" rel="stylesheet" />
    <link href="responsivo/layout_plus/includes/css/themes/gw.min.css" rel="stylesheet" />
    <link href="responsivo/layout_plus/includes/css/ingressos.min.css" rel="stylesheet" />
    <link href="responsivo/layout_plus/includes/css/novo_ingressos.css" rel="stylesheet" />
    <link href="responsivo/layout_plus/includes/css/assentos.min.css" rel="stylesheet" />
    <script
      defer=""
      src="responsivo/layout_plus/includes/js/joker_header.min.js"
      type="text/javascript"
    ></script>
    <script src="react/react.production.min.js"></script>
    <script src="react/react-dom.production.min.js"></script>
    <script src="react/babel.min.js"></script>
    <script src="react/material-ui.development.js"></script>
    <script src="npm/axios/dist/axios.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
    <link rel="stylesheet" href="css2?family=Roboto:wght@300;400;500;600;700&display=swap" />
    <link rel="stylesheet" href="responsivo/ui/theme/materialIcons.css" />
    <link rel="stylesheet" href="responsivo/ui/theme/icon-css.css" />
    <style>
      #gw_cover {
        background: linear-gradient(to bottom, rgba(234, 234, 234, 0) 450px, #014eda 550px) center
            top,
          url("imagenseventos/image.jpg");
        background-repeat: no-repeat;
      }

      /* Estilos para os setores */
      .setor-box {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid #d0d0d0;
        background-color: #e8e8e8;
        border-radius: 5px;
        margin-bottom: 12px;
        padding: 15px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
      }

      .setor-box:hover {
        background-color: #dedede;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .setor-marker {
        display: inline-block;
        width: 20px;
        height: 20px;
        border-radius: 3px;
        margin-right: 15px;
        flex-shrink: 0;
      }

      .setor-box h5 {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 5px;
        color: #333;
      }

      .setor-box p {
        font-size: 14px;
        color: #444;
        margin-bottom: 5px;
        line-height: 1.4;
      }

      .ticket-details {
        padding-top: 15px;
        margin-top: 15px;
        border-top: 1px solid #ccc;
      }

      .ticket-type {
        padding: 12px 0;
        margin-bottom: 8px;
        border-bottom: 1px solid #eee;
      }

      .ticket-type:last-child {
        margin-bottom: 0;
        border-bottom: none;
      }

      .price {
        font-size: 18px;
        font-weight: 600;
        color: #1a1a1a;
      }

      .type-label {
        font-size: 13px;
        color: #666;
        margin-left: 4px;
      }

      .quantity-control {
        display: flex;
        align-items: center;
        gap: 12px;
        position: relative;
        z-index: 3;
        background: transparent;
        border-radius: 30px;
        padding: 0;
      }

      .qty-btn {
        width: 28px;
        height: 28px;
        border: none;
        background: #f0f0f0;
        border-radius: 50%;
        cursor: pointer;
        font-size: 12px;
        font-weight: bold;
        color: #555;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
      }

      .qty-btn:hover {
        background: #28a745;
        color: white;
        transform: translateY(-1px);
      }

      .qty-btn:active {
        transform: translateY(0);
      }

      .qty-btn:disabled {
        background: #e9ecef;
        color: #adb5bd;
        cursor: not-allowed;
        box-shadow: none;
      }

      .qty-value {
        min-width: 20px;
        text-align: center;
        font-weight: 600;
        font-size: 16px;
        color: #333;
      }

      .benefits-icons {
        display: flex;
        gap: 8px;
        margin-top: 8px;
      }

      .benefit-badge {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
        border: 1px solid;
      }

      .benefit-openbar {
        background: transparent;
        color: #4070f4;
        border-color: #4070f4;
      }

      .benefit-openfood {
        background: transparent;
        color: #f44040;
        border-color: #f44040;
      }

      .cart-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px;
        background: rgba(240, 240, 240, 0.95);
        box-shadow: 0 -3px 10px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        /* Mobile-friendly padding with safe area consideration */
        padding-bottom: calc(12px + env(safe-area-inset-bottom, 0px));
        border-top: 1px solid #d0d0d0;
      }

      .cart-button {
        width: 100%;
        padding: 15px;
        background-color: #000000;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: not-allowed;
        transition: all 0.2s ease;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .cart-button-content {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .cart-total {
        font-weight: bold;
        background: rgba(255, 255, 255, 0.2);
        padding: 5px 12px;
        border-radius: 4px;
        font-size: 15px;
      }

      .cart-button:not([disabled]) {
        background-color: #000000;
        cursor: pointer;
      }

      .cart-button:not([disabled]):hover {
        background-color: #333333;
      }

      .cart-button:not([disabled]):active {
        transform: translateY(1px);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
      }

      .material-symbols-outlined {
        transition: transform 0.3s ease;
        color: #444;
      }

      [data-expanded="true"] .material-symbols-outlined {
        transform: rotate(90deg);
      }
    </style>
  </head>
  <script
    src="../scripts/utms/latest.js"
    data-utmify-prevent-xcod-sck=""
    data-utmify-prevent-subids=""
    async=""
    defer=""
  ></script>

  <style>
    .logo-ticket {
      position: fixed;
      top: 19px;
      left: 10px;
      height: 25px;
      width: auto;
      z-index: 9999;
    }

    .regras-item {
      margin-bottom: 15px;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
    }

    .regras-numero {
      font-weight: bold;
      margin-right: 5px;
    }
  </style>

  <!-- GOOGLE TRADUTOR -->
  <style type="text/css">
    .VIpgJd-ZVi9od-ORHb-OEVmcd {
      display: none !important;
    }
    body {
      position: static !important;
      top: 0 !important;
    }
  </style>

  <body>
    <div id="app_gw">
      <!-- MENU COMPONENTE VUE -->
      <menu-gw :img="dados_empresa.logo" :pagina="pagina"></menu-gw>
      <div class="m-navbar"></div>
      <img src="imagenseventos/cacaushow.png" alt="Ticket Icon" class="logo-ticket" />
      <!-- FIM MENU COMPONENTE VUE -->

      <script type="text/javascript">
        window.id_evento = "36213";
      </script>
     
      <!-- CONTAGEM REGRASSIVA -->
      <!-- FIM CONTAGEM REGRESSIVA -->

      <!-- MODAL TRADUTOR -->
      <div
        class="modal fade"
        id="modal_form_tradução"
        tabindex="-1"
        role="dialog"
        aria-labelledby="exampleModalCenterTitle"
        aria-hidden="true"
      >
        <div class="modal-dialog modal-dialog-centered modal-md" role="document">
          <div class="modal-content">
            <!-- <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div> -->
            <div class="modal-body">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
              <div>
                <div class="row d-flex justify-content-center">
                  <div id="google_translate_element" class="boxTradutor d-none"></div>

                  <a class="cursor-pointer m-2" href="javascript:traduzirParaPt()">
                    <img
                      width="80"
                      height="80"
                      alt="portugues"
                      src="gw-bucket/responsivo/imgs/pt.png"
                    />
                  </a>
                  <a class="cursor-pointer m-2" href="javascript:traduzirParaEn()">
                    <img
                      width="80"
                      height="80"
                      alt="ingles"
                      src="gw-bucket/responsivo/imgs/en.png"
                    />
                  </a>
                  <a class="cursor-pointer m-2" href="javascript:traduzirParaEs()">
                    <img
                      width="80"
                      height="80"
                      alt="espanhol"
                      src="gw-bucket/responsivo/imgs/es.png"
                    />
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- CARRINHO (ABRE SUGESTAO) -->
      <div id="carrinho" class="fixed-bottom footer-gw" style="display: none">
        <div class="container">
          <div class="row pt-2">
            <div class="col-6">
              <p class="resumo-cart1">
                <b><span id="ings_car">0 ITENS</span> NO CARRINHO</b>
              </p>
              <p translate="no" class="resumo-cart2 notranslate">
                <span translate="no" class="notranslate" id="val_total">0,00</span>
              </p>
              <p class="resumo-cart3">
                TX.: <span translate="no" class="notranslate" id="val_taxa">0,00</span>
              </p>
              <p style="display: none" class="resumo-cart3">
                Doação: <span translate="no" class="notranslate" id="val_doacao">0,00</span>
              </p>
            </div>
            <div class="col-6 text-right">
              <i>Tudo pronto?</i><br />

              <!-- REGRA PARA REDIRECIONAR -->
              <script type="text/javascript">
                window.id_evento = "36213";
                window.event_redirect = "\/login?pg=participante?";
              </script>
              <!-- FIM REGRA PARA REDIRECIONAR -->

              <!-- ABRE SUGESTAO react E REDIRECIONA -->
              <a class="btn btn-sm btn-light" href="#" onclick="render();">
                <!-- render() - renderiza o react -->
                CONTINUAR <i class="fa fa-chevron-right ml-2"></i>
              </a>
              <!-- FIM ABRE SUGESTAO react E REDIRECIONA -->
            </div>
          </div>
        </div>
      </div>
      <!-- FIM DO CARRINHO (ABRE SUGESTAO) -->

      <!-- BACKGROUND -->
      <div id="gw_cover">
        <!-- PARTE DE CIMA  -->
        <div class="container">
          <div class="row">
            <div class="col-12 text-center">
              <img src="imagenseventos/26-05-2025_17-19-17.png" class="img-fluid" />
            </div>
          </div>
        </div>
        <!-- FIM DA PARTE DE CIMA -->

        <!-- DETALHE PICOTE -->
        <div class="container borda-ings"></div>
        <!-- FIM DETALHE PICOTE -->

        <div class="conteudo container mb-3">
          <!-- DETALHES DO EVENTO -->
          <div class="row justify-content-center mb-2">
            <!-- IMAGEM DESTAQUE DO EVENTO -->
            <div class="col-12 col-lg-4 text-center col-destaque img-destaque box-gw p-1 mb-1">
              <img
                onclick="open_img('https://cdn.guicheweb.com.br/gw-bucket/imagenseventos/26-05-2025_17-19-13.jpg')"
                src="../gw-bucket/imagenseventos/26-05-2025_17-19-13.jpg"
                class="img-fluid"
              />
              
            </div>
            <!-- FIM IMAGEM DESTAQUE DO EVENTO -->
            <!-- DESCRIÇÕES -->
            <input
              type="hidden"
              name="ip"
              id="gw_nome_evento"
              value="Henrique e Juliano - Itajaí"
            />
            <div class="col-12 col-lg-6 pt-3 col-infoevento">
              <h2 class="notranslate" translate="no">
                <b class="notranslate" translate="no">Henrique e Juliano - Itajaí</b>
              </h2>
              <h4>01/08/2025</h4>
              <h5 class="notranslate" translate="no">
                <i class="fas fa-map-marker-alt"></i> Centreventos Marejada - ITAJAI/SC
              </h5>
              <p>
                <i
                  >Taxa de Serviço:
                  <span>10%</span>
                </i>
              </p>
              
            </div>
            <!-- FIM DESCRICOES -->
          </div>
          <!-- FIM DETALHES DO EVENTO -->
          <div id="div-comissario"></div>
          <!-- AGRUPAMENTO DE BOTOES -->
          <div class="row mb-4">
            <div class="col-12">
              <button
                type="button"
                onclick="go_to('#ingressos_aba')"
                class="btn btn-light btn-infos"
              >
                <i class="fa fa-ticket-alt"></i> <span class="d-none d-md-inline">Ingressos</span>
              </button>
              <button
                type="button"
                onclick="go_to('#localizacao_evento')"
                class="btn btn-light btn-infos"
              >
                <i class="fas fa-map-marked-alt"></i>
                <span class="d-none d-md-inline">Localização</span>
              </button>
              <button
                type="button"
                onclick="go_to('#infos_evento')"
                class="btn btn-light btn-infos"
              >
                <i class="fas fa-info-circle"></i> <span class="d-none d-md-inline">Info</span>
              </button>
              <button
                type="button"
                onclick="go_to('#video_evento')"
                class="btn btn-light btn-infos"
              >
                <i class="fab fa-youtube"></i> <span class="d-none d-md-inline">Vídeo</span>
              </button>
            </div>
          </div>
          <!-- FIM AGRUPAMENTO DE BOTOES -->

          <!-- INGRESSOS -->
          <!-- Container de pacotes -->
          <div class="container">
            <!-- se tiver cupom -->
            <div class="row justify-content-center mb-4">
              <div class="modal fade" id="modal_cupom">
                <div class="modal-dialog modal-lg">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title">Ingressos para o cupom <span></span></h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                      </button>
                    </div>
                    <div class="modal-body text-left modal-gw">
                      <!-- modal ingressos cupom -->
                    </div>
                    <div class="modal-footer">
                      <button
                        type="button"
                        class="btn btn-secondary"
                        data-dismiss="modal"
                        aria-label="Close"
                      >
                        Fechar
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div id="campo_cupom" style="display: none">
                <div class="text-center">
                  <h5>
                    Possui código promocional?<br />
                    Insira abaixo e veja se temos algum ingresso especial pra você!
                  </h5>
                </div>
                <div class="text-center">
                  <div class="input-group">
                    <input
                      id="inputcup"
                      type="text"
                      class="form-control"
                      placeholder="Cupom de Desconto"
                      value=""
                    />
                    <div class="input-group-append">
                      <button
                        class="btn btn-light"
                        style="color: #212529; background-color: #e2e6ea; border-color: #dae0"
                        onclick="carregar_cupom($('#inputcup').val());"
                      >
                        <i class="fa fa-ticket-alt"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div id="login_cupom" class="col-md-8 text-center" style="display: none">
                <h5>
                  Possui código promocional?<br />
                  Faça o login e insira o código
                  <a href="/login" class="btn btn-dark btn-sm">Clicando Aqui</a>
                </h5>
              </div>
            </div>
            <!-- fim cupom -->

            <div class="row justify-content-center">
              <div class="col-12 col-md-8 col-lg-6 text-center">
                <img
                  id="img-mapa-gw"
                  class="img-fluid"
                  src="gw-bucket/mapas/26-05-2025_21-09-18.jpg"
                />
              </div>
            </div>

            <div id="ingressos_aba" class="row mb-2">
              <div class="col-12 mt-3 mb-3">
                <h2 id="titulo_ingressos"></h2>
              </div>
            </div>

            <div id="exibe_ingressos">
              <!-- exibição dos setores por data -->
            </div>

            <link rel="stylesheet" crossorigin="" href="responsivo/ui/doacao/index.css" />

            <div id="ui_doacao"></div>

            <script type="text/babel">
              const { useState, useEffect } = React;
              const {
                CssBaseline,
                Box,
                AccordionDetails,
                Link,
                Accordion,
                AccordionSummary,
                Stack,
                Typography,
                Button,
                Chip,
                Modal,
                useTheme,
                useMediaQuery,
                CircularProgress,
                Backdrop,
              } = MaterialUI;

              function currency(valor) {
                // Converter o valor para número, caso seja uma string
                const numero = Number(valor);

                // Verificar se o valor é um número válido
                if (isNaN(numero)) {
                  return "Valor inválido";
                }

                // Formatar o número como moeda (Real Brasileiro)
                const formatador = new Intl.NumberFormat("pt-BR", {
                  style: "currency",
                  currency: "BRL",
                });

                // Retornar o valor formatado
                return formatador.format(numero);
              }

              function unificarObjetos(array) {
                // Objeto para armazenar os objetos unificados
                let objetosUnificados = {};

                // Iterar sobre cada objeto no array
                array.forEach(objeto => {
                  // Verificar se já existe um objeto com o mesmo id_campanha
                  if (objetosUnificados[objeto.id_campanha]) {
                    // Se existir, adiciona o valor ao array de valores desse objeto
                    objetosUnificados[objeto.id_campanha].valores.push({
                      id: objeto.id_campanha_valor,
                      valor: objeto.valor,
                    });
                  } else {
                    // Se não existir, cria um novo objeto com o id_campanha como chave e um array de valores com o valor atual
                    objetosUnificados[objeto.id_campanha] = {
                      id_campanha: objeto.id_campanha,
                      nome: objeto.nome,
                      detalhes: objeto.detalhes,
                      resumo: objeto.resumo,
                      imagem: objeto.imagem,
                      id_empresa: objeto.id_empresa,
                      id_produtor: objeto.id_produtor,
                      direcionada: objeto.direcionada,
                      canal: objeto.canal,
                      status: objeto.status,
                      datetime_inicio: objeto.datetime_inicio,
                      datetime_fim: objeto.datetime_fim,
                      usuario_log: objeto.usuario_log,
                      valores: [{ id: objeto.id_campanha_valor, valor: objeto.valor }], // Array com o valor atual
                    };
                  }
                });

                // Retorna um array com os valores do objeto unificado
                return Object.values(objetosUnificados);
              }

              function App() {
                const [loading, setLoading] = useState(false);
                const theme = useTheme();
                const [openModal, setOpenModal] = useState(false);
                const [modalContent, setModalContent] = useState(
                  "<h1>Página em Testes</h1><p>Esta página está em fase de testes. Por favor, volte mais tarde.</p>"
                );
                const [dataDoacao, setDataDoacao] = useState(null);
                const id_evento = 36213;
                const [selectedDonation, setSelectedDonation] = useState([]);
                const matchUpSm = useMediaQuery(theme.breakpoints.up("sm"));

                const getData = async () => {
                  const uri = "/webservices/api/services/doacao.php";
                  const resp = await axios.post(uri, {
                    funcao: "list_doacao",
                    id_evento: id_evento,
                  });

                  const newData = unificarObjetos(resp.data.item);

                  console.log(newData);

                  setDataDoacao(newData);
                };

                const getVinculos = async () => {
                  const uri = "/webservices/api/services/doacao.php";
                  const resp = await axios.post(uri, {
                    funcao: "list_vinculos",
                  });

                  console.log("selectedDonation ->", resp.data.item);

                  setSelectedDonation(resp.data.item);
                };

                useEffect(() => {
                  setTimeout(() => {
                    getData();
                  }, 3000);
                  getVinculos();
                }, []);

                // handle mui
                const postVincularCarrinho = async (id_campanha, id_campanha_valor) => {
                  setLoading(true);
                  const uri = "/webservices/api/services/doacao.php";
                  await axios.post(uri, {
                    funcao: "vincularDoacaoCarrinho",
                    id_campanha: id_campanha,
                    id_campanha_valor: id_campanha_valor,
                  });
                  previewCarrinho();
                  setLoading(false);
                };

                const removeVinculoCarrinho = async id_campanha => {
                  setLoading(true);
                  const uri = "/webservices/api/services/doacao.php";
                  await axios.post(uri, {
                    funcao: "desvincularDoacaoCarrinho",
                    id_campanha: id_campanha,
                  });
                  previewCarrinho();
                  setLoading(false);
                };

                const [momentSelectedDonation, setSomentSelectedDonation] = useState(null);

                const addDonation = ({ id_campanha, id_campanha_valor }) => {
                  setSelectedDonation(prevState => {
                    const existingDonationIndex = prevState.findIndex(
                      donation => donation.id_campanha === id_campanha
                    );

                    if (
                      existingDonationIndex !== -1 &&
                      prevState[existingDonationIndex].id_campanha_valor === id_campanha_valor
                    ) {
                      removeVinculoCarrinho(id_campanha);
                      return prevState.filter((_, index) => index !== existingDonationIndex);
                    }

                    // Se a campanha já existe, mas o id_campanha_valor é diferente, atualiza
                    if (existingDonationIndex !== -1) {
                      const newState = [...prevState];
                      newState[existingDonationIndex] = {
                        ...newState[existingDonationIndex],
                        id_campanha_valor,
                      };
                      postVincularCarrinho(id_campanha, id_campanha_valor);
                      return newState;
                    }

                    postVincularCarrinho(id_campanha, id_campanha_valor);
                    // Se a campanha não existe, adiciona uma nova
                    return [...prevState, { id_campanha, id_campanha_valor }];
                  });
                };

                useEffect(() => {
                  momentSelectedDonation && addDonation(momentSelectedDonation);
                }, [momentSelectedDonation]);

                const handleOpenModal = content => {
                  setModalContent(content);
                  setOpenModal(true);
                };

                const handleCloseModal = () => {
                  setOpenModal(false);
                };

                // STYLE =======
                const boxStyle = { p: 10 };
                const accordionStyle = {
                  my: 3,
                  boxShadow: "none",
                  borderWidth: "0.5px",
                  borderColor: "#C7C7C7",
                  borderStyle: "solid",
                  backgroundColor: "#f8f9fa",
                };
                const contentAccordionStyle = { backgroundColor: "#f8f9fa" };
                const stackMainStyle = { width: "100%" };
                const stackInlineStyle = { height: "100%" };
                const labelStyle = {
                  py: ".5rem",
                  fontWeight: "500",
                  width: "110px",
                  height: "50px",
                  textAlign: "center",
                  color: "white",
                  borderRadius: 1,
                };
                const typographyStyle = { fontWeight: "500" };
                const titleStyle = { fontWeight: "500", textAlign: "center", fontSize: "2rem" };
                const subTypographyStyle = {
                  color: "#898989",
                  maxWidth: {
                    sm: 100,
                    md: 250,
                  },
                  overflow: "hidden",
                  display: "-webkit-box",
                  WebkitBoxOrient: "vertical",
                  WebkitLineClamp: 1,
                  px: {
                    sm: 1,
                    md: 0,
                    lg: 0,
                    xl: 0,
                  },
                };
                const wBtn = { width: { xs: "100%", md: "20%", lg: "20%" } };
                const buttonStyle = {
                  borderRadius: 1,
                  backgroundColor: "#11d132",
                  color: "white",
                  p: 1,
                  "&:hover": { backgroundColor: "#11d132" },
                };
                const detailTextStyle = { color: "#898989", mb: 1 };
                const linkStyle = { color: "#1b5e20", minWidth: 80 };
                const modalStyle = {
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  transform: "translate(-50%, -50%)",
                  minWidth: { xs: "90%", md: "50%" },
                  maxWidth: "90%",
                  bgcolor: "background.paper",
                  boxShadow: 24,
                  pt: 2,
                  px: 4,
                  pb: 3,
                  borderRadius: 2,
                };

                const backdropStyle = { color: "#fff" };

                const modalhtml = { __html: modalContent };

                return (
                  dataDoacao &&
                  dataDoacao.length >= 1 && (
                    <Box>
                      <div className="row justify-content-center mb-4">
                        <div className="col-md-8 text-left">
                          {dataDoacao.map((campanha, i) => (
                            <Accordion key={i} sx={accordionStyle}>
                              <AccordionSummary>
                                <Stack
                                  sx={stackMainStyle}
                                  spacing={1}
                                  alignItems="center"
                                  direction={matchUpSm ? "row" : "column"}
                                  justifyContent="space-between"
                                >
                                  <Stack
                                    direction="row"
                                    spacing={3}
                                    justifyContent="center"
                                    alignItems="center"
                                    sx={stackInlineStyle}
                                  >
                                    {
                                      // IMAGEM
                                      campanha.imagem && (
                                        <Stack
                                          justifyContent="center"
                                          alignItems="center"
                                          sx={labelStyle}
                                        >
                                          <img src={campanha.imagem} alt="logo" />
                                        </Stack>
                                      )
                                    }
                                    <Stack>
                                      <Typography variant="h6" component="h5" sx={typographyStyle}>
                                        {campanha.nome}
                                      </Typography>
                                      {matchUpSm && (
                                        <Stack
                                          direction="row"
                                          spacing={1}
                                          justifyContent="center"
                                          alignItems="center"
                                        >
                                          <Typography component="p" sx={subTypographyStyle}>
                                            {campanha.resumo
                                              ? campanha.resumo
                                              : "Contamos com a sua ajuda para fazer a diferença!"}
                                          </Typography>
                                          <Link
                                            component="button"
                                            sx={linkStyle}
                                            underline="none"
                                            variant="body2"
                                            onClick={() => handleOpenModal(campanha.detalhes)}
                                          >
                                            Saiba Mais
                                          </Link>
                                        </Stack>
                                      )}
                                    </Stack>
                                  </Stack>
                                  {!matchUpSm && (
                                    <Stack
                                      direction="row"
                                      spacing={1}
                                      justifyContent="center"
                                      alignItems="center"
                                    >
                                      <Typography component="p" sx={subTypographyStyle}>
                                        {campanha.resumo
                                          ? campanha.resumo
                                          : "Contamos com a sua ajuda para fazer a diferença!"}
                                      </Typography>
                                      <Link
                                        component="button"
                                        sx={linkStyle}
                                        underline="none"
                                        variant="body2"
                                        onClick={() => handleOpenModal(campanha.detalhes)}
                                      >
                                        Saiba Mais
                                      </Link>
                                    </Stack>
                                  )}
                                  <Stack
                                    direction="row"
                                    justifyContent="center"
                                    alignItems="center"
                                    sx={wBtn}
                                  >
                                    <Button fullWidth variant="text" size="small" sx={buttonStyle}>
                                      Quero Doar
                                    </Button>
                                  </Stack>
                                </Stack>
                              </AccordionSummary>
                              <AccordionDetails>
                                <Typography component="p" sx={detailTextStyle}>
                                  Selecione um valor:
                                </Typography>
                                <Stack direction="row" spacing={2}>
                                  {campanha.valores.map((price, i) => (
                                    <Chip
                                      key={i}
                                      color={
                                        selectedDonation.find(
                                          ({ id_campanha, id_campanha_valor }) =>
                                            id_campanha === campanha.id_campanha &&
                                            id_campanha_valor === price.id
                                        ) && "success"
                                      }
                                      onClick={() =>
                                        setSomentSelectedDonation({
                                          id_campanha: campanha.id_campanha,
                                          id_campanha_valor: price.id,
                                        })
                                      }
                                      label={currency(price.valor)}
                                    />
                                  ))}
                                </Stack>
                              </AccordionDetails>
                            </Accordion>
                          ))}
                          <Modal open={openModal} onClose={handleCloseModal}>
                            <Box sx={modalStyle}>
                              <div dangerouslySetInnerHTML={modalhtml} />
                            </Box>
                          </Modal>
                          <Backdrop sx={backdropStyle} open={loading} className="backdrop">
                            <CircularProgress color="inherit" />
                          </Backdrop>
                        </div>
                      </div>
                    </Box>
                  )
                );
              }

              const root = ReactDOM.createRoot(document.getElementById("ui_doacao"));
              root.render(
                <>
                  <CssBaseline />
                  <App />
                </>
              );
            </script>

            <div>
              <div class="modal fade" id="modal_ingressos">
                <div class="modal-dialog modal-lg">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="exampleModalLongTitle"></h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                      </button>
                      <h4 class="modal-title"></h4>
                    </div>
                    <div class="modal-body text-left modal-gw">
                      <!-- modal ingressos com varias datas -->
                    </div>
                    <div class="modal-footer">
                      <button
                        type="button"
                        class="btn btn-secondary"
                        data-dismiss="modal"
                        aria-label="Close"
                      >
                        Fechar
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- FIM DO ELSE AQUI -->
            <!-- FIM DO ELSE DO CONTADOR -->
          </div>
          <!-- FIM INGRESSOS -->

          <!-- AVISO CASO NAO TENHA NENHUM INGRESSO DISPONÍVEL -->

          <div class="row mt-4 mb-4 justify-content-center">
            <div class="col-12 col-md-10">
              <div class="text-center">
                <h2 id="loading_setores" class="font-weight-bold">
                  CARREGANDO SETORES<br /><br />
                  <i class="text-muted fas fa-spinner fa-spin fa-2x"></i>
                </h2>
              </div>

              <div id="setores_content" style="display: none">
                <h2 class="text-center mb-4" style="margin-top: 0; background: none">
                  ADQUIRA SEU INGRESSO AGORA
                </h2>

                <!-- Lounges -->
                <div class="setor-box p-3 mb-3 bg-light rounded" onclick="toggleSetor('lounges')">
                  <div class="d-flex align-items-center">
                    <div class="setor-marker" style="background-color: #ff0000"></div>
                    <div class="flex-grow-1 text-left">
                      <h5 class="mb-1">LOUNGES</h5>
                      <p class="mb-0 text-muted">
                        Área exclusiva com sofás e mesas reservadas. Open Bar Premium: Whisky, Gin Premium, Vodka Premium, Cerveja, Refrigerante e
                        Espumante.<br />Open Food: Finger foods e petiscos gourmet.
                      </p> A partir de R$ 150,00
                      <div class="mt-1 d-flex align-items-center">
                        <span class="esgotado-text" style="color: #36c000 !important"
                          >(Lote 1)</span
                        >
                        <span class="material-symbols-outlined icon-small ml-2">Local_cafe</span>
                        <span class="material-symbols-outlined icon-small ml-1">restaurant</span>
                        <span class="material-symbols-outlined icon-small ml-1">chair</span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <span class="material-symbols-outlined" id="lounges-icon">chevron_right</span>
                    </div>
                  </div>

                  <div id="lounges-details" class="ticket-details" style="display: none">
                    <div class="esgotado-detalhes mt-3" style="text-align: left">
                      <div class="esgotado-ingresso-item" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left">LOUNGES (Meia)</span>
                          <i class="fas fa-info-circle text-primary"></i>
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 150,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('lounges-meia', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="lounges-meia-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('lounges-meia', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="esgotado-ingresso-item mt-3" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >LOUNGES (Inteira)</span
                          >
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 300,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('lounges-inteira', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="lounges-inteira-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('lounges-inteira', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Área VIP -->
                <div class="setor-box p-3 mb-3 bg-light rounded" onclick="toggleSetor('extravip')">
                  <div class="d-flex align-items-center">
                    <div class="setor-marker" style="background-color: #32cd32"></div>
                    <div class="flex-grow-1 text-left">
                      <h5 class="mb-1">ÁREA VIP</h5>
                      <p class="mb-0 text-muted">Open Bar: Cerveja, Água e Refrigerante.

                      </p> A partir de R$ 60,00
                      <div class="mt-1 d-flex align-items-center">
                        <span class="esgotado-text" style="color: #36c000 !important"
                          >(Lote 1)</span
                        >
                        <span class="material-symbols-outlined icon-small ml-2">Local_cafe</span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <span class="material-symbols-outlined" id="extravip-icon"
                        >chevron_right</span
                      >
                    </div>
                  </div>
                  <div id="extravip-details" class="ticket-details" style="display: none">
                    <div class="esgotado-detalhes mt-3" style="text-align: left">
                      <div class="esgotado-ingresso-item" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >ÁREA VIP (Meia)</span
                          >
                          <i class="fas fa-info-circle text-primary"></i>
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1
                            , LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 60,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('extravip-meia', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="extravip-meia-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('extravip-meia', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="esgotado-ingresso-item mt-3" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >ÁREA VIP (Inteira)</span
                          >
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 119,60</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('extravip-inteira', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="extravip-inteira-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('extravip-inteira', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Premium Open Bar -->
                <div class="setor-box p-3 mb-3 bg-light rounded" onclick="toggleSetor('premium')">
                  <div class="d-flex align-items-center">
                    <div class="setor-marker" style="background-color: #ffa500"></div>
                    <div class="flex-grow-1 text-left">
                      <h5 class="mb-1">PREMIUM OPEN BAR +18</h5>
                      <p class="mb-0 text-muted">
                        Open Bar: Gin, Vodka, Whisky 08 Anos, Cerveja, Água e Refrigerante.
                      </p>A partir de R$ 95,00
                      <div class="mt-1 d-flex align-items-center">
                        <span class="esgotado-text ultimo-lote">(Lote 1)</span>
                        <span class="material-symbols-outlined icon-small ml-2">Local_cafe</span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <span class="material-symbols-outlined" id="premium-icon">chevron_right</span>
                    </div>
                  </div>
                  <div id="premium-details" class="ticket-details" style="display: none">
                    <div class="esgotado-detalhes mt-3" style="text-align: left">
                      <div class="esgotado-ingresso-item" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >PREMIUM OPEN BAR +18 (Meia)</span
                          >
                          <i class="fas fa-info-circle text-primary"></i>
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 95,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('premium-meia', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="premium-meia-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('premium-meia', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="esgotado-ingresso-item mt-3" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >Premium (Inteira)</span
                          >
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>1, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 190,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('premium-inteira', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="premium-inteira-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('premium-inteira', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Camarote Box -->
                <div class="setor-box p-3 mb-3 bg-light rounded" onclick="toggleSetor('camarote')">
                  <div class="d-flex align-items-center">
                    <div class="setor-marker" style="background-color: #ff1493"></div>
                    <div class="flex-grow-1 text-left">
                      <h5 class="mb-1">CAMAROTE BOX</h5>
                      <p class="mb-0 text-muted">
                        Open Bar: Gin Premium, Vodka Premium, Whisky, Cerveja, Água,
                        Refrigerante, Campari, Espumante e Licor. Open Food: Comidas típicas,
                        Petiscos e Muito mais
                      </p>A partir de R$ 200,00
                      <div class="mt-1 d-flex align-items-center">
                        <span class="esgotado-text" style="color: #36c000 !important"
                          >(Lote 2)</span
                        >
                        <span class="material-symbols-outlined icon-small ml-2">Local_cafe</span>
                        <span class="material-symbols-outlined icon-small ml-1">restaurant</span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <span class="material-symbols-outlined" id="camarote-icon"
                        >chevron_right</span
                      >
                    </div>
                  </div>

                  <div id="camarote-details" class="ticket-details" style="display: none">
                    <div class="esgotado-detalhes mt-3" style="text-align: left">
                      <div class="esgotado-ingresso-item" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >CAMAROTE BOX (Meia)</span
                          >
                          <i class="fas fa-info-circle text-primary"></i>
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>2, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 200,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('camarote-meia', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="camarote-meia-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('camarote-meia', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="esgotado-ingresso-item mt-3" style="text-align: left">
                        <div class="ingresso-titulo" style="text-align: left">
                          Ingresso:
                          <span class="ingresso-nome" style="text-align: left"
                            >CAMAROTE BOX (Inteira)</span
                          >
                        </div>
                        <div class="ingresso-lote" style="text-align: left">
                          Lote: <span>2, LOTE</span>
                        </div>
                        <div class="ingresso-valor" style="text-align: left">
                          Valor: <span class="text-danger font-weight-bold">R$ 400,00</span>
                          <div class="quantity-control" style="float: right">
                            <button
                              onclick="updateQuantity('camarote-inteira', -1, event)"
                              class="qty-btn"
                            >
                              -
                            </button>
                            <span id="camarote-inteira-qty" class="qty-value">0</span>
                            <button
                              onclick="updateQuantity('camarote-inteira', 1, event)"
                              class="qty-btn"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div id="cart-container" class="cart-container" style="display: none">
                  <button id="cart-button" class="cart-button" onclick="goToCart()" disabled="">
                    <div class="cart-button-content">
                      <i class="fas fa-shopping-cart"></i>
                      <span>ADICIONAR AO CARRINHO</span>
                    </div>
                    <span id="cart-total" class="cart-total">R$ 0,00</span>
                  </button>
                </div>

                <style>
                  .setor-box {
                    cursor: pointer;
                    transition: all 0.2s ease;
                    border: 1px solid #d0d0d0;
                    background-color: #e8e8e8;
                    border-radius: 5px;
                    margin-bottom: 12px;
                    padding: 15px;
                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
                  }

                  .setor-box:hover {
                    background-color: #dedede;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                  }

                  .setor-esgotado {
                    opacity: 1;
                    background-color: #434343 !important;
                    cursor: not-allowed;
                    position: relative;
                    color: white;
                  }

                  .setor-esgotado:hover {
                    box-shadow: none;
                    background-color: #434343 !important;
                  }

                  .setor-esgotado h5 {
                    color: white;
                  }

                  .setor-esgotado p {
                    color: #e0e0e0;
                  }

                  .setor-esgotado .material-symbols-outlined {
                    color: white;
                  }

                  .esgotado-text.esgotado {
                    color: #ff0000;
                    font-weight: 700;
                  }

                  /* Estilos para detalhes de ingressos esgotados */
                  .esgotado-detalhes {
                    padding-top: 15px;
                    border-top: 1px solid rgba(255, 255, 255, 0.2);
                    text-align: left !important;
                  }

                  .esgotado-ingresso-item {
                    background-color: white;
                    padding: 12px;
                    border-radius: 5px;
                    color: #333;
                    margin-bottom: 10px;
                    text-align: left !important;
                  }

                  .ingresso-titulo {
                    font-size: 14px;
                    margin-bottom: 5px;
                    text-align: left !important;
                  }

                  .ingresso-nome {
                    font-weight: 600;
                    text-align: left !important;
                  }

                  .ingresso-lote {
                    font-size: 14px;
                    color: #666;
                    margin-bottom: 5px;
                    text-align: left !important;
                  }

                  .ingresso-valor {
                    font-size: 14px;
                    text-align: left !important;
                  }

                  .esgotado-badge {
                    color: #ff0000;
                    font-weight: 600;
                    margin-left: 5px;
                    text-align: left !important;
                  }

                  .esgotado-text {
                    font-size: 13px;
                    font-weight: 600;
                    margin-right: 10px;
                  }

                  .esgotado-text.esgotado {
                    color: #ff0000;
                  }

                  .ultimo-lote {
                    color: #36c000;
                  }

                  .drink-icon,
                  .food-icon {
                    color: #666;
                    font-size: 16px;
                    margin-right: 8px;
                  }

                  .arrow-container {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                  }

                  .arrow-icon {
                    color: #333;
                    font-size: 24px;
                  }

                  .ticket-details {
                    margin-top: 15px;
                    padding-top: 15px;
                    border-top: 1px solid #ccc;
                  }

                  .ticket-type {
                    background: #e0e0e0;
                    border-radius: 4px;
                    padding: 12px;
                    margin-bottom: 10px;
                    transition: all 0.3s ease;
                  }

                  .ticket-type.disabled {
                    opacity: 0.5;
                    background: #d8d8d8;
                    position: relative;
                    cursor: not-allowed;
                    border: 1px dashed #bbb;
                  }

                  .ticket-type.disabled::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(0, 0, 0, 0.05);
                    z-index: 1;
                  }

                  .ticket-type.disabled::before {
                    content: "Não disponível";
                    position: absolute;
                    top: 50%;
                    right: 15px;
                    transform: translateY(-50%);
                    background: rgba(40, 167, 69, 0.8);
                    color: white;
                    padding: 3px 8px;
                    border-radius: 3px;
                    font-size: 12px;
                    z-index: 2;
                  }

                  .price {
                    font-size: 16px;
                    font-weight: 700;
                    color: #28a745;
                  }

                  .type-label {
                    color: #444;
                    margin-left: 5px;
                  }

                  .quantity-control {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    position: relative;
                    z-index: 3;
                  }

                  .qty-btn {
                    width: 36px;
                    height: 36px;
                    border: 1px solid #bbb;
                    background: #f0f0f0;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 18px;
                    font-weight: bold;
                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                  }

                  .qty-btn:hover {
                    background: #e0e0e0;
                  }

                  .qty-btn:disabled {
                    background: #d8d8d8;
                    color: #999;
                    cursor: not-allowed;
                    border-color: #ccc;
                  }

                  .qty-value {
                    min-width: 20px;
                    text-align: center;
                    font-weight: 500;
                    font-size: 16px;
                    color: #333;
                  }

                  /* Estilo para o container principal de setores */
                  #setores_content {
                    background-color: #f0f0f0;
                    padding: 15px;
                    border-radius: 8px;
                    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.05);
                  }

                  /* Título dos setores */
                  #setores_content h2.text-center.mb-4 {
                    color: #333;
                    font-weight: 700;
                    text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.7);
                    margin-bottom: 20px !important;
                    padding: 10px 0;
                    border-bottom: 2px solid #ddd;
                  }

                  .cart-container {
                    position: fixed;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    padding: 12px;
                    background: rgba(240, 240, 240, 0.95);
                    box-shadow: 0 -3px 10px rgba(0, 0, 0, 0.15);
                    z-index: 1000;
                    /* Mobile-friendly padding with safe area consideration */
                    padding-bottom: calc(12px + env(safe-area-inset-bottom, 0px));
                    border-top: 1px solid #d0d0d0;
                  }

                  .cart-button {
                    width: 100%;
                    padding: 15px;
                    background-color: #000000;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    font-size: 16px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    cursor: not-allowed;
                    transition: all 0.2s ease;
                    font-weight: bold;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                  }

                  .cart-button-content {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                  }

                  .cart-button-content i {
                    font-size: 18px;
                  }

                  .cart-total {
                    font-weight: bold;
                    background: rgba(255, 255, 255, 0.2);
                    padding: 5px 12px;
                    border-radius: 4px;
                    font-size: 15px;
                  }

                  .cart-button:not([disabled]) {
                    background-color: #000000;
                    cursor: pointer;
                  }

                  .cart-button:not([disabled]):hover {
                    background-color: #333333;
                  }

                  .cart-button:not([disabled]):active {
                    transform: translateY(1px);
                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
                  }

                  .material-symbols-outlined {
                    transition: transform 0.3s ease;
                    color: #444;
                  }

                  [data-expanded="true"] .material-symbols-outlined {
                    transform: rotate(90deg);
                  }

                  /* Mobile Optimizations */
                  @media (max-width: 767px) {
                    .setor-box {
                      padding: 12px;
                      margin-bottom: 10px;
                      background-color: #e5e5e5;
                    }

                    .setor-box h5 {
                      font-size: 16px;
                      margin-bottom: 6px;
                      color: #333;
                    }

                    .setor-box p {
                      font-size: 13px;
                      margin-bottom: 6px;
                      color: #444;
                    }

                    .ticket-type {
                      padding: 10px;
                      margin-bottom: 8px;
                      background-color: #dedede;
                    }

                    .price {
                      font-size: 15px;
                    }

                    .type-label {
                      font-size: 13px;
                    }

                    .quantity-control {
                      gap: 8px;
                    }

                    .qty-btn {
                      width: 40px;
                      height: 40px;
                      font-size: 20px;
                      /* Larger touch targets for mobile */
                      background-color: #e8e8e8;
                    }

                    .qty-value {
                      font-size: 16px;
                      font-weight: 600;
                    }

                    .cart-container {
                      padding: 10px;
                      background: rgba(232, 232, 232, 0.95);
                    }

                    .cart-button {
                      padding: 16px;
                      font-size: 15px;
                    }

                    .cart-button-content i {
                      font-size: 20px;
                    }

                    body {
                      padding-bottom: 80px; /* Space for floating cart button */
                    }

                    #setores_content {
                      padding: 10px;
                      background-color: #e8e8e8;
                    }
                  }
                </style>

                <script>
                  const tickets = {
                    "camarote-meia": {
                      price: 200.0,
                      qty: 0,
                      setor: "camarote",
                      available: true,
                      type: "meia",
                    },
                    "camarote-inteira": {
                      price: 400.0,
                      qty: 0,
                      setor: "camarote",
                      available: true,
                      type: "inteira",
                    },
                    "premium-meia": {
                      price: 95.0,
                      qty: 0,
                      setor: "premium",
                      available: true,
                      type: "meia",
                    },
                    "premium-inteira": {
                      price: 190.0,
                      qty: 0,
                      setor: "premium",
                      available: true,
                      type: "inteira",
                    },
                    "extravip-meia": {
                      price: 60.0,
                      qty: 0,
                      setor: "extravip",
                      available: true,
                      type: "meia",
                    },
                    "extravip-inteira": {
                      price: 119.6,
                      qty: 0,
                      setor: "extravip",
                      available: true,
                      type: "inteira",
                    },
                    "lounges-meia": {
                      price: 150.0,
                      qty: 0,
                      setor: "lounges",
                      available: true,
                      type: "meia",
                    },
                    "lounges-inteira": {
                      price: 300.0,
                      qty: 0,
                      setor: "lounges",
                      available: true,
                      type: "inteira",
                    },
                  };

                  let selectedSetor = null;
                  let selectedType = null;
                  const MAX_TICKETS = 3;
                  let anyExpanded = false; // Track if any sector is expanded

                  // Função executada ao carregar a página
                  window.addEventListener("DOMContentLoaded", function () {
                    setTimeout(function () {
                      showSetores();
                      setupTicketContainers();

                      // Inicializar todos os botões corretamente
                      setupAllButtons();

                      // Esconder o carrinho inicialmente
                      const cartContainer = document.getElementById("cart-container");
                      if (cartContainer) {
                        cartContainer.style.display = "none";
                      }
                    }, 1000);
                  });

                  // Configurar os botões de adição/remoção com eventos direitos
                  function setupAllButtons() {
                    // Adicionar eventos diretamente aos botões
                    for (const [id, ticket] of Object.entries(tickets)) {
                      if (ticket.available) {
                        // Configurar botão de adição
                        const addBtn = document.querySelector(
                          `button[onclick*="updateQuantity('${id}', 1"]`
                        );
                        if (addBtn) {
                          // Substituir o evento onclick para garantir que o updateCartDisplay seja chamado
                          addBtn.onclick = function (event) {
                            event.stopPropagation();
                            addTicket(id);
                          };
                        }

                        // Configurar botão de remoção
                        const removeBtn = document.querySelector(
                          `button[onclick*="updateQuantity('${id}', -1"]`
                        );
                        if (removeBtn) {
                          // Substituir o evento onclick para garantir que o updateCartDisplay seja chamado
                          removeBtn.onclick = function (event) {
                            event.stopPropagation();
                            removeTicket(id);
                          };
                        }
                      }
                    }
                  }

                  // Configurar os contêineres de ingressos com IDs
                  function setupTicketContainers() {
                    // Inicialização básica dos containers
                    const sectors = ["premium", "extravip", "camarote", "lounges"];
                    sectors.forEach(sector => {
                      const details = document.getElementById(sector + "-details");
                      if (details) {
                        details.style.display = "none";
                      }
                    });
                  }

                  function toggleSetor(setorId) {
                    const details = document.getElementById(setorId + "-details");
                    const icon = document.getElementById(setorId + "-icon");

                    if (details.style.display === "none") {
                      details.style.display = "block";
                      icon.textContent = "expand_more";

                      // Mostrar o botão de carrinho quando um setor é aberto
                      showCartButton();
                      anyExpanded = true;
                    } else {
                      details.style.display = "none";
                      icon.textContent = "chevron_right";

                      // Verificar se algum outro setor está expandido ou temos items no carrinho
                      checkAndUpdateCartVisibility();
                      anyExpanded = false;
                    }
                  }

                  // Verificar se algum setor está aberto
                  function isAnySectorExpanded() {
                    const sectors = ["premium", "extravip", "camarote", "lounges"];
                    return sectors.some(sector => {
                      const details = document.getElementById(sector + "-details");
                      return details && details.style.display !== "none";
                    });
                  }

                  // Mostrar o botão do carrinho
                  function showCartButton() {
                    const cartContainer = document.getElementById("cart-container");
                    if (cartContainer) {
                      cartContainer.style.display = "block";
                      updateCartDisplay();
                    }
                  }

                  // Verificar se o botão do carrinho deve continuar visível
                  function checkAndUpdateCartVisibility() {
                    // Se tiver itens selecionados ou algum setor aberto, manter visível
                    if (getTotalQuantity() > 0 || isAnySectorExpanded()) {
                      showCartButton();
                    } else {
                      // Se não tiver itens e nenhum setor aberto, esconder
                      const cartContainer = document.getElementById("cart-container");
                      if (cartContainer) {
                        cartContainer.style.display = "none";
                      }
                    }
                  }

                  function getTotalQuantity() {
                    return Object.values(tickets).reduce((sum, ticket) => sum + ticket.qty, 0);
                  }

                  function getTotalPrice() {
                    return Object.values(tickets).reduce(
                      (sum, ticket) => sum + ticket.price * ticket.qty,
                      0
                    );
                  }

                  // Funções simplificadas para adicionar/remover ingressos
                  function addTicket(ticketId) {
                    const ticket = tickets[ticketId];

                    // Se o ingresso não estiver disponível, não permitir adição
                    if (!ticket.available) {
                      return;
                    }

                    const ticketSetor = ticket.setor;
                    const ticketType = ticket.type;

                    // Se estiver adicionando o primeiro ingresso, definir o setor e tipo selecionados
                    if (getTotalQuantity() === 0) {
                      selectedSetor = ticketSetor;
                      selectedType = ticketType;
                      updateTicketAvailability(selectedSetor, selectedType);
                    }

                    // Verificar se o setor é o mesmo que já foi selecionado
                    if (selectedSetor !== null && ticketSetor !== selectedSetor) {
                      alert("Você só pode selecionar ingressos de um único setor.");
                      return;
                    }

                    // Verificar se o tipo de ingresso é o mesmo que já foi selecionado
                    if (selectedType !== null && ticketType !== selectedType) {
                      alert("Você só pode selecionar um tipo de ingresso (meia ou inteira).");
                      return;
                    }

                    // Verificar se está dentro do limite de 3 ingressos
                    if (getTotalQuantity() >= MAX_TICKETS) {
                      alert(`Você só pode selecionar até ${MAX_TICKETS} ingressos.`);
                      return;
                    }

                    // Adicionar o ingresso
                    ticket.qty++;

                    // Atualizar display de quantidade
                    updateTicketDisplay(ticketId);

                    // Atualizar o carrinho
                    updateCartDisplay();

                    // Garantir que o botão do carrinho está visível
                    showCartButton();
                  }

                  function removeTicket(ticketId) {
                    const ticket = tickets[ticketId];

                    // Verificar se tem ingresso para remover
                    if (ticket.qty <= 0) {
                      return;
                    }

                    // Remover o ingresso
                    ticket.qty--;

                    // Atualizar display de quantidade
                    updateTicketDisplay(ticketId);

                    // Se remover todos os ingressos, resetar as seleções
                    if (getTotalQuantity() === 0) {
                      selectedSetor = null;
                      selectedType = null;
                      resetTicketAvailability();

                      // Verificar se deve esconder o botão do carrinho
                      checkAndUpdateCartVisibility();
                    }

                    // Atualizar o carrinho
                    updateCartDisplay();
                  }

                  // Atualiza o display de quantidade de um ingresso específico
                  function updateTicketDisplay(ticketId) {
                    const qtyElement = document.getElementById(`${ticketId}-qty`);
                    if (qtyElement) {
                      qtyElement.textContent = tickets[ticketId].qty;
                    }
                  }

                  // Atualiza o display do carrinho
                  function updateCartDisplay() {
                    const totalItems = getTotalQuantity();
                    const totalPrice = getTotalPrice();

                    // Elementos do carrinho
                    const cartContainer = document.getElementById("cart-container");
                    const cartButton = document.getElementById("cart-button");

                    // Garantir que elementos existem
                    if (!cartContainer || !cartButton) {
                      console.error("Elementos do carrinho não encontrados!");
                      return;
                    }

                    // Habilitar/desabilitar botão baseado no total
                    cartButton.disabled = totalItems === 0;

                    // Atualizar texto e valor do botão
                    if (totalItems > 0) {
                      // Texto otimizado para dispositivos móveis
                      const buttonText =
                        window.innerWidth <= 767
                          ? `${totalItems} INGRESSO${totalItems > 1 ? "S" : ""}`
                          : `ADICIONAR ${totalItems} INGRESSO${
                              totalItems > 1 ? "S" : ""
                            } AO CARRINHO`;

                      cartButton.innerHTML = `
                                            <div class="cart-button-content">
                                                <i class="fas fa-shopping-cart"></i>
                                                <span>${buttonText}</span>
                                            </div>
                                            <span id="cart-total" class="cart-total">R$ ${totalPrice
                                              .toFixed(2)
                                              .replace(".", ",")}</span>
                                        `;
                    } else {
                      const buttonText =
                        window.innerWidth <= 767 ? `ADICIONAR` : `ADICIONAR AO CARRINHO`;

                      cartButton.innerHTML = `
                                            <div class="cart-button-content">
                                                <i class="fas fa-shopping-cart"></i>
                                                <span>${buttonText}</span>
                                            </div>
                                            <span id="cart-total" class="cart-total">R$ 0,00</span>
                                        `;
                    }
                  }

                  function updateTicketAvailability(selectedSetor, selectedType) {
                    // Desabilitar botões de outros setores e tipos
                    for (const [id, ticket] of Object.entries(tickets)) {
                      if (ticket.setor !== selectedSetor || ticket.type !== selectedType) {
                        // Encontrar o container do ticket pelo ID
                        const ticketContainer = document.getElementById(
                          `${ticket.setor}-${ticket.type}-container`
                        );

                        if (ticketContainer) {
                          // Adicionar classe "disabled" ao contêiner do ticket
                          ticketContainer.classList.add("disabled");

                          // Desabilitar botões
                          const buttons = ticketContainer.querySelectorAll(".qty-btn");
                          buttons.forEach(btn => (btn.disabled = true));
                        }
                      }
                    }
                  }

                  function resetTicketAvailability() {
                    // Reabilitar todos os botões e remover classes de desabilitado
                    for (const [id, ticket] of Object.entries(tickets)) {
                      if (ticket.available) {
                        const ticketContainer = document.getElementById(
                          `${ticket.setor}-${ticket.type}-container`
                        );

                        if (ticketContainer) {
                          // Remover classe "disabled"
                          ticketContainer.classList.remove("disabled");

                          // Reabilitar botões
                          const buttons = ticketContainer.querySelectorAll(".qty-btn");
                          buttons.forEach(btn => (btn.disabled = false));
                        }
                      }
                    }
                  }

                  // Funções para identificar quando o setor foi alterado
                  function showSetores() {
                    document.getElementById("loading_setores").style.display = "none";
                    document.getElementById("setores_content").style.display = "block";
                  }

                  function goToCart() {
                    // Get selected tickets
                    const selectedTickets = [];
                    let redirectUrl = "";
                    let totalValue = 0;
                    let ticketCount = 0;
                    let selectedSetor = "";
                    let selectedType = "";

                    for (const [id, ticket] of Object.entries(tickets)) {
                      if (ticket.qty > 0) {
                        selectedTickets.push({
                          id: id,
                          qty: ticket.qty,
                          price: ticket.price,
                          total: ticket.price * ticket.qty,
                          setor: ticket.setor,
                          type: ticket.type,
                        });

                        ticketCount += ticket.qty;
                        totalValue += ticket.price * ticket.qty;
                        selectedSetor = ticket.setor;
                        selectedType = ticket.type;
                      }
                    }

                    // Determine which URL to use based on ticket type, setor, quantity and total value
                    if (selectedSetor === "camarote") {
                      if (selectedType === "meia") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/PyE2Zy8qdo23qRb";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/eApQgz2dkl5gEb7";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/mwK436d54rXGQ8b";
                        }
                      } else if (selectedType === "inteira") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/BNjzgPlE4wRgM78";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/lDW0ZaJAxerGN7E";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/a6pVgd2A4NnZk7B";
                        }
                      }
                    } else if (selectedSetor === "lounges") {
                      if (selectedType === "meia") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/521rZJz6ONjZeaX";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/VroegN16D06GKwj";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/rn4RgQvrW0N3wBV";
                        }
                      } else if (selectedType === "inteira") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/bz5KZbVA166Z7dL";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/DYp0ZxVkLK4gmvX";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/RmA83Ea6Vwr3PVp";
                        }
                      }
                    } else if (selectedSetor === "extravip") {
                      if (selectedType === "meia") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/2wq7Gr7J5QAgBAN";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/nQ7kZ7pm4AlG0eJ";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/RmA83Ea6VNr3PVp";
                        }
                      } else if (selectedType === "inteira") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/RmA83Ea6VP03PVp";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/xQBPZvRW07VZmVq";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/DYp0ZxVkLDlgmvX";
                        }
                      }
                    } else if (selectedSetor === "premium") {
                      if (selectedType === "meia") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/N1nVZpYjKPLGlM6";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/6YQPgjnA5yegpxz";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/5pjw3RnjVOy32lQ";
                        }
                      } else if (selectedType === "inteira") {
                        if (ticketCount === 1) {
                          redirectUrl = "https://pay.payego.shop/521rZJz6OqbZeaX";
                        } else if (ticketCount === 2) {
                          redirectUrl = "https://pay.payego.shop/a6pVgd2A4RxZk7B";
                        } else if (ticketCount === 3) {
                          redirectUrl = "https://pay.payego.shop/PVYB34eM2aEZKzk";
                        }
                      }
                    }

                    // Add total value to URL as a parameter for tracking
                    redirectUrl += `?valor=${totalValue}&qty=${ticketCount}`;

                    // Show loading effect on button
                    const cartButton = document.getElementById("cart-button");
                    cartButton.innerHTML = `
                                        <div class="cart-button-content">
                                            <i class="fas fa-spinner fa-spin"></i>
                                            <span>PROCESSANDO...</span>
                                        </div>
                                    `;

                    // Store selected tickets in localStorage
                    localStorage.setItem("selectedTickets", JSON.stringify(selectedTickets));

                    // Redirect to appropriate URL with a slight delay to show loading
                    setTimeout(() => {
                      window.location.href = redirectUrl;
                    }, 500);
                  }

                  // Adicionar verificação de tamanho de tela ao redimensionar
                  window.addEventListener("resize", function () {
                    updateCartDisplay();
                  });
                </script>
              </div>
            </div>
          </div>

          <script>
            // Função para mostrar os setores após o carregamento
            function showSetores() {
              document.getElementById("loading_setores").style.display = "none";
              document.getElementById("setores_content").style.display = "block";
            }

            // Simula o carregamento (você pode adaptar isso para seu sistema real)
            setTimeout(showSetores, 1000);
          </script>

          <style>
            @import url("../css2");

            .setor-box {
              border-radius: 4px;
              border: 1px solid #dee2e6;
              cursor: pointer;
              transition: all 0.2s ease;
              font-family: "Montserrat", sans-serif;
            }

            .setor-box h5 {
              font-size: 24px;
              font-weight: 700;
              margin-top: 0;
              text-transform: uppercase;
              letter-spacing: 0.5px;
            }

            .setor-box p {
              margin-bottom: 5px;
              color: #666;
              font-size: 14px;
              font-weight: 400;
            }

            .badge-primary {
              background-color: #ff1493;
              color: white;
              font-weight: 600;
              padding: 8px 20px;
              margin-bottom: 8px;
              display: inline-block;
              font-family: "Montserrat", sans-serif;
              text-transform: uppercase;
              letter-spacing: 1px;
              font-size: 14px;
              border-radius: 50px;
            }

            .badge-success {
              background-color: #32cd32;
              color: white;
              font-weight: 600;
              padding: 8px 20px;
              margin-bottom: 8px;
              display: inline-block;
              font-family: "Montserrat", sans-serif;
              text-transform: uppercase;
              letter-spacing: 1px;
              font-size: 14px;
              border-radius: 50px;
            }

            .setor-box .text-muted {
              font-size: 13px;
              font-weight: 500;
            }

            .material-symbols-outlined {
              color: #666;
            }

            .open-bar-section,
            .open-food-section {
              margin-top: 12px;
            }

            .open-bar-section p,
            .open-food-section p {
              font-size: 14px;
              line-height: 1.5;
              margin-top: 5px;
            }

            h2.text-center.mb-4 {
              font-family: "Montserrat", sans-serif;
              font-weight: 700;
              font-size: 28px;
              text-transform: uppercase;
              letter-spacing: 0.5px;
              margin-bottom: 25px !important;
            }
          </style>
          <!-- AVISO CASO NAO TENHA NENHUM INGRESSO DISPONÍVEL -->

          <!-- VIDEO DO EVENTO -->
          <div id="video_evento" class="row mt-4 mb-4">
            <div class="col-12">
              <div class="video-section">
                <h3 class="video-title">Assista ao Vídeo do Evento</h3>
                <div class="video-container">
                  <iframe
                    src="https://www.youtube.com/embed/BcTpDt9ZOWM"
                    title="Henrique e Juliano - Itajaí"
                    frameborder="0"
                    id="frameVideo"
                    height="350"
                    src=""
                    frameborder="0"
                    allow="autoplay; encrypted-media"
                    allowfullscreen="allowfullscreen"
                    class="yt-video"
                  ></iframe>
                </div>
              </div>
            </div>
          </div>
          <!-- FIM VIDEO DO EVENTO -->

          <!-- REGRAS DE VENDA ONLINE -->
          <div class="container bg-gray">
            <div id="ui_regras"></div>
          </div>

          <script type="text/babel">
            const {
              CssBaseline,
              Box,
              AccordionDetails,
              Link,
              Accordion,
              AccordionSummary,
              Stack,
              Typography,
              Button,
              Chip,
              Modal,
              useTheme,
              useMediaQuery,
              CircularProgress,
              Backdrop,
            } = MaterialUI;

            function App() {
              const stackMainStyle = { width: "100%" };
              const accordionStyle = {
                my: 3,
                boxShadow: "none",
                borderWidth: "0.5px",
                borderColor: "#E6E9EC",
                borderStyle: "solid",
                backgroundColor: "#E6E9EC",
              };
              const textStyle = { mb: 2, textAlign: "start" };
              const buttonStyle = {
                borderRadius: 1,
                backgroundColor: "#898989",
                color: "white",
                px: 2,
                "&:hover": { backgroundColor: "#898989" },
              };

              return (
                <Box>
                  <div className="row justify-content-center mb-4">
                    <div className="col-12 col-md-10">
                      <Accordion sx={accordionStyle} defaultExpanded>
                        <AccordionSummary>
                          <Typography variant="h6">Informações</Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <Stack sx={stackMainStyle}>
                            <div className="text-justify">
                              <p className="regras-item">
                                A dupla Henrique e Juliano desembarca em Itajaí com um show
                                exclusivo e memorável! Após o enorme sucesso da turnê "Em Casa", os
                                irmãos trazem um novo espetáculo para o público catarinense. Será
                                uma noite inesquecível repleta de emoção, energia e os maiores
                                sucessos da carreira.
                              </p>

                              <p className="regras-item">
                                Prepare-se para uma noite histórica no litoral, com um espetáculo
                                inédito que promete emocionar o público. A dupla sertaneja que
                                arrasta multidões vai apresentar seus maiores sucessos em um evento
                                especial. Não perca essa oportunidade única de vivenciar uma
                                experiência inesquecível!
                              </p>

                              <p className="regras-item">
                                *Ao garantir seu ingresso para o show Henrique e Juliano em Itajaí,
                                você também pode adquirir um ECO COPO exclusivo do evento! Após a
                                compra, você receberá um voucher por e-mail, junto com seu ingresso.
                                No dia do show, leve o voucher a um dos pontos de troca espalhados
                                pelo evento para pegar seu eco copo e aproveitar a festa com estilo!
                              </p>

                              <p className="regras-item">
                                Ah, esse evento é 100% open bar — curta sem moderação e, se beber,
                                não dirija!
                              </p>

                              <p className="regras-item">
                                <strong>ÁREA VIP:</strong> Cerveja, água e refrigerante.
                              </p>

                              <p className="regras-item">
                                <strong>PREMIUM OPEN BAR +18:</strong> Gin, vodka, whisky 08 anos,
                                cerveja, água e refrigerante.
                              </p>

                              <p className="regras-item">
                                <strong>CAMAROTE ALÔ INVEJA:</strong> Gin Premium, vodka Premium,
                                whisky 12 anos, cerveja, água, refrigerante, campari, espumante e
                                licor. Comidas típicas, petiscos e muito mais.
                              </p>

                              <p className="regras-item">
                                <strong>Dúvidas Frequentes:</strong>
                              </p>

                              <p className="regras-item">
                                <strong>
                                  1. Será permitida a entrada de menores acompanhados e com
                                  autorização?
                                </strong>
                                <br />
                                R. Censura do evento 18 anos. Não será permitida a entrada de
                                menores mesmo que estejam acompanhados dos pais ou responsáveis!
                              </p>

                              <p className="regras-item">
                                <strong>
                                  2. Quais alimentos serão aceitos na portaria com ingresso
                                  solidário?
                                </strong>
                                <br />
                                R. Os alimentos aceitos serão os classificados como não perecíveis,
                                ou seja, todos aqueles que vêm embalados de fábrica e têm longa
                                duração, por gentileza atentar-se ao prazo de validade.
                              </p>

                              <p className="regras-item">
                                <strong>3. Qual horário de abertura dos portões do evento?</strong>
                                <br />
                                R. A abertura está prevista para às 21h00.
                              </p>

                              <p className="regras-item">
                                <strong>4. Qual horário previsto para início do show?</strong>
                                <br />
                                R. O show está previsto para começar às 00h30.
                              </p>

                              <p className="regras-item">
                                <strong>5. Como faço para me cadastrar no site?</strong>
                                <br />
                                R. Quando você efetua sua primeira compra no site, automaticamente,
                                antes de efetuar o pagamento, aparecerá a opção para você se
                                cadastrar. Caso queira efetuar o cadastro antes de comprar os
                                ingressos clique aqui.
                              </p>

                              <p className="regras-item">
                                <strong>6. É necessário alterar a titularidade do ingresso?</strong>
                                <br />
                                R. Caso o titular esteja junto dos dependentes não é obrigatório a
                                alteração. Para os que desejam nomear os ingressos conforme serão
                                utilizados clique aqui.
                              </p>

                              <p className="regras-item">
                                <strong>7. O evento terá open bar?</strong>
                                <br />
                                R. Sim! Neste evento todos os setores serão open bar. Confira os
                                descritivos de cada área.
                              </p>

                              <p className="regras-item">
                                <strong>8. Terá estacionamento?</strong>
                                <br />
                                R. Sim, terceirizado. A produção do evento não se responsabiliza
                                pelos veículos deixados nos arredores do evento. Aconselhamos ir de
                                transporte por aplicativo ou táxi.
                              </p>

                              <p className="regras-item">
                                <strong>9. É permitido a entrada com copos ou canecas?</strong>
                                <br />
                                R. Não será permitida a entrada.
                              </p>

                              <p className="regras-item">
                                <strong>10. Terá acesso PCD? Qual setor?</strong>
                                <br />
                                R. Ambos os setores possuem acesso e uma área exclusiva para PCD e
                                seus acompanhantes. Ambas pagam Meia-Entrada.
                              </p>

                              <p className="regras-item">
                                <b>
                                  Itajaí, estamos prontos para viver essa noite inesquecível com
                                  vocês!
                                </b>
                              </p>
                            </div>
                          </Stack>
                        </AccordionDetails>
                      </Accordion>
                    </div>
                  </div>
                </Box>
              );
            }

            const root = ReactDOM.createRoot(document.getElementById("ui_regras"));
            root.render(
              <>
                <CssBaseline />
                <App />
              </>
            );
          </script>
          <!-- FIM REGRAS DE VENDA ONLINE DUPLICADAS -->

          <!-- SETOR DE INFORMAÇÕES DUPLICADO -->
          <div class="container bg-gray">
            <div id="ui_regras_duplicado"></div>
          </div>

          <script type="text/babel">
            const {
              CssBaseline,
              Box,
              AccordionDetails,
              Link,
              Accordion,
              AccordionSummary,
              Stack,
              Typography,
              Button,
              Chip,
              Modal,
              useTheme,
              useMediaQuery,
              CircularProgress,
              Backdrop,
            } = MaterialUI;

            function AppDuplicado() {
              const stackMainStyle = { width: "100%" };
              const accordionStyle = {
                my: 3,
                boxShadow: "none",
                borderWidth: "0.5px",
                borderColor: "#E6E9EC",
                borderStyle: "solid",
                backgroundColor: "#E6E9EC",
              };
              const textStyle = { mb: 2, textAlign: "start" };
              const buttonStyle = {
                borderRadius: 1,
                backgroundColor: "#898989",
                color: "white",
                px: 2,
                "&:hover": { backgroundColor: "#898989" },
              };

              return (
                <Box>
                  <div className="row justify-content-center mb-4">
                    <div className="col-12 col-md-10">
                      <Accordion sx={accordionStyle} defaultExpanded>
                        <AccordionSummary>
                          <Typography variant="h6">Regras de Venda On-line</Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <Stack sx={stackMainStyle}>
                            <div className="text-justify">
                              <p className="regras-item">
                                1. Todas as disposições aplicáveis às vendas de ingressos pela
                                plataforma da Guichê Web se encontram previstas nos Termos de Uso,
                                sobre o qual todo(a) usuário(a) cadastrado(a) manifestou ciência e
                                aceite ao realizar seu cadastro, também se encontrando disponíveis
                                ininterruptamente para consulta em nosso site.
                              </p>

                              <p className="regras-item">
                                2. A Guichê Web é uma plataforma intermediária especializada na
                                venda de ingressos online e não organiza os eventos comercializados.
                                Os organizadores utilizam nossa plataforma para ofertar seus eventos
                                ao público, sendo os únicos responsáveis por todo e qualquer assunto
                                relativo ao evento.
                              </p>

                              <p className="regras-item">
                                3. Como livremente aceito e previsto nos Termos de Uso, a obrigação
                                da Guichê Web se limita estritamente ao uso e manutenção da
                                plataforma de vendas dos ingressos, garantindo sua usabilidade
                                perante os(as) usuários(as) cadastrados(as).
                              </p>

                              <p className="regras-item">
                                4. Cabe ao organizador do evento (e apenas a ele) garantir que suas
                                atividades estejam em conformidade com a legislação aplicável a seu
                                evento, incluindo documentos necessários para sua realização.
                              </p>

                              <p className="regras-item">
                                5. Nosso site (www.guicheweb.com.br) e nosso App (Guichê Web) são os
                                únicos canais oficiais de vendas da Guichê Web.{" "}
                              </p>

                              <p className="regras-item">
                                6. A Guichê Web não permite e repudia a venda de ingressos para
                                eventos irregulares, que não estejam seguindo todas as orientações e
                                protocolos de segurança determinados pelas autoridades
                                governamentais competentes.
                              </p>

                              <p className="regras-item">
                                7. Para acessar o evento é obrigatória a apresentação do ingresso
                                impresso e assinado ou em formato digital através do App (Guichê
                                Web), juntamente com documento de identificação oficial com foto.
                              </p>

                              <p className="regras-item">
                                8. O não comparecimento ao evento invalidará o ingresso e não
                                permitirá reembolso, em nenhuma hipótese, ante o integral
                                fornecimento do serviço e consequente realização do evento.
                              </p>

                              <p className="regras-item">
                                9. O(a) próprio(a) consumidor(a) é o único e exclusivo responsável
                                por solicitar a transferência de ingressos para outro(a) usuário(a)
                                em sua compra.
                              </p>

                              <p className="regras-item">
                                10. Compras suspeitas ou com evidências de fraude de qualquer
                                natureza no processo de compra serão recusadas, canceladas e/ou
                                reembolsadas.
                              </p>

                              <p className="regras-item">
                                11. Solicitações de estorno/cancelamento em razão do exercício do
                                direito de arrependimento deverão ser efetuadas em até 7 (sete) dias
                                contados da data de compra do ingresso.
                              </p>
                            </div>
                          </Stack>
                        </AccordionDetails>
                      </Accordion>
                    </div>
                  </div>
                </Box>
              );
            }

            const rootDuplicado = ReactDOM.createRoot(
              document.getElementById("ui_regras_duplicado")
            );
            rootDuplicado.render(
              <>
                <CssBaseline />
                <AppDuplicado />
              </>
            );
          </script>
          <!-- FIM SETOR DE INFORMAÇÕES DUPLICADO -->

          <!-- GOOGLE MAPS (MAPA DO EVENTO) -->
          <div id="localizacao_evento" class="row mt-4 mb-4">
            <div class="col-12">
              <h2><b>LOCALIZAÇÃO</b></h2>
              <hr />
              <iframe
                src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3557.8081861803084!2d-48.653471!3d-26.909582!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x94d8cc0942cc4979%3A0x2b5c54ec7c8209a6!2sCentreventos%20Governador%20Luiz%20Henrique%20da%20Silveira!5e0!3m2!1spt-PT!2sus!4v1748383109291!5m2!1spt-PT!2sus"
                height="350"
                style="width: 100%"
                frameborder="0"
                allowfullscreen=""
              ></iframe>
            </div>
          </div>
          <!-- FIM GOOGLE MAPS (MAPA DO EVENTO) -->

          <!-- PDV DO EVENTO -->

          <!-- ORGANIZADOR DO EVENTO -->
          <!-- FIM ORGANIZADOR DO EVENTO -->
        </div>

        <div id="alerta_privacidade" class="d-flex justify-content-center align-items-center"></div>

        <!-- SUGESTAO REACT -->
        <div id="ui_sugestao"></div>

        <script type="text/babel">
          const { useState, useEffect } = React;
          const {
              CssBaseline,
              Box,
              AccordionDetails,
              Link,
              Accordion,
              AccordionSummary,
              Stack,
              Typography,
              Button,
              Chip,
              Modal,
              useTheme,
              useMediaQuery,
              CircularProgress,
              Backdrop,
              Grid,
              Dialog,
              DialogContent,
              DialogTitle,
              DialogActions,
              IconButton,
              Card,
              CardActions,
              CardContent,
              CardMedia,
          } = MaterialUI;

          const truncate = (str, length) => {
              if (!str || str.length <= length) return str ?? null;
              return `${str.slice(0, length - 3)}...`;
          };

          function currency(valor) {
              const numero = Number(valor);
              if (isNaN(numero)) {
                  return 'Valor inválido';
              }

              const formatador = new Intl.NumberFormat('pt-BR', {
                  style: 'currency',
                  currency: 'BRL'
              });

              return formatador.format(numero);
          }



          function loadImage(igmName) {
              const urlImage = 'https://cdn.guicheweb.com.br/gw-bucket/imagenseventos/'
              return `${urlImage}${igmName}`;
          }

          function App() {
              const redirect = "\/login?pg=participante?";
              const id_evento = "36213";
              const session = {"empresa":{"id":"1","nome":"Guichê Web","css":"https:\/\/cdn.guicheweb.com.br\/gw-bucket\/imagens\/css_empresas\/gw.css","fac":"https://youtu.be/BcTpDt9ZOWM,"link_twitter":"https:\/\/twitter.com\/guicheweb","app_android":"https:\/\/play.google.com\/store\/apps\/details?id=br.com.guicheweb","app_ios":"https:\/\/itunes.apple.com\/us\/app\/guich%C3%AA-web\/id1322189354?l=pt&amp;ls=1&amp;mt=8","cor_navbar":"#000000","favicon":"https:\/\/s3.guicheweb.com.br\/nova_marca\/gw_favcon.png","RODAPE_ABRAPE":"https:\/\/abrape.com.br\/","RODAPE_DUVIDAS":"https:\/\/guicheweb.octadesk.com\/kb","RODAPE_SEGURANCA":"<p style=\"color: rgb(33, 37, 41); font-family: Lato;\">Sabemos o quanto sua segurança e sua privacidade são importantes e nos preocupamos muito com isso. Para garantir a sua tranquilidade, o Guichê Web segue todas as normas e compromissos que o PAGSEGURO estabelece para garantir sua privacidade dos clientes.<br><br>Com relação aos seus dados pessoais de endereçamento, pagamento e conteúdo do pedido, fique certo de que não serão utilizados para outros fins que não o de processamento dos pedidos realizados, não sendo portanto divulgados em hipótese alguma.<\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\"><b>Como armazenamos suas informações?<\/b><\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\">Para sua maior segurança, os dados cadastrais são armazenados em um banco de dados com acesso restrito em ambiente seguro.<\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\"><b>Como garantimos sua segurança?<\/b><\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\">Todas as suas informações pessoais são enviadas de forma criptografada para o site da operadora de crédito responsável pelos pagamentos, que utiliza tecnologias e práticas mais modernas de pagamento com as operadoras de cartão de crédito, de forma que os seus dados de cartão de crédito não ficam arquivados pela empresa, sendo enviados diretamente para a operadora de cartão de crédito.<\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\"><b>Quem tem acesso aos meus dados cadastrais?<\/b><\/p><p style=\"color: rgb(33, 37, 41); font-family: Lato;\">Seus dados cadastrais são acessados somente por nossa equipe de atendimento e\/ou da empresa operadora de crédito responsável pelos pagamentos.<\/p>","RODAPE_TERMO":"https:\/\/guicheweb.notion.site\/Termos-Pol-ticas-b5713f88c432496a8cb3683da9be7dfd"},"cupom_rapido":null,"ce":null,"UrlRedirect":"ingressos\/36213","evento":"36213","gw_csrf_token":"fce43683ac96c894310f09d48483a2bb"};
              const carrinho = session.carrinho;
              const [openModal, setOpenModal] = useState(true);
              const [ingressos, setIngressos] = useState(null);
              const [quantidades, setQuantidades] = useState({});

              const getData = async () => {
                  window.loading()

                  try {
                      let dados = new FormData();
                      dados.append("a", "sugestao_ingresso");
                      dados.append("id_evento", id_evento);

                      const url = '/webservices/api/services/ingressos.php';
                      const resp = await axios.post(url, dados);
                      console.log("resp", resp);

                      if (resp.data.ings_datas.length === 0) {
                          window.location.href = redirect
                          return
                      }
                      setIngressos(resp.data.ings_datas);
                      window.unloading()
                  } catch (error) {
                      console.error('Erro ao carregar dados do modal:', error);
                      window.location.href = redirect
                  }
              }

              useEffect(() => {
                  if (ingressos) {
                      const initialQuantities = ingressos.reduce((acc, ingresso) => {
                          acc[ingresso.id_ingresso] = 0;
                          return acc;
                      }, {});
                      carrinho && Object.values(carrinho).forEach(item => {
                          if (item.ingresso && item.qtd && initialQuantities.hasOwnProperty(item.ingresso)) {
                              initialQuantities[item.ingresso] += item.qtd;
                          }
                      });
                      setQuantidades(initialQuantities);
                  }
              }, [ingressos])

              useEffect(() => {getData()}, [])

              const addIngresso = async (id_ingresso, id_lote, id_setor, id_evento) => {
                  let dados = new FormData();
                  dados.append("a", "add_carrinho");
                  dados.append("id_ingresso", id_ingresso);
                  dados.append("id_lote", id_lote);
                  dados.append("id_setor", id_setor);
                  dados.append("qtd", 1);
                  dados.append("id_evento", id_evento);
                  dados.append("confirm", "true");
                  dados.append("cupom", "null");

                  window.loading()
                  try {
                      const uri = '/webservices/api/api.php'
                      const result = await axios.post(uri, dados);

                      setQuantidades((prevQuantidades) => {
                          const newQuantities = { ...prevQuantidades };
                          if (newQuantities[id_ingresso] !== undefined) {
                                  newQuantities[id_ingresso] += 1;
                              if (newQuantities[id_ingresso] < 0){
                                  newQuantities[id_ingresso] = 0
                              };
                          }
                          return newQuantities
                      });
                  } catch(err) {
                      console.log(err);
                  }finally{
                      window.unloading()
                  }
              }

              const removeIngresso = async (id_ingresso, id_lote, id_setor, id_evento) => {
                  let dados = new FormData();
                  dados.append("a", "remover_carrinho");
                  dados.append("id_ingresso", id_ingresso);
                  dados.append("id_lote", id_lote);
                  dados.append("id_setor", id_setor);
                  dados.append("qtd", 1);
                  dados.append("id_evento", id_evento);
                  dados.append("confirm", "true");
                  dados.append("cupom", "null");

                  try {
                      window.loading()
                      const uri = '/webservices/api/api.php'
                      const result = await axios.post(uri, dados);

                      setQuantidades((prevQuantidades) => {
                          const newQuantities = { ...prevQuantidades };
                          if (newQuantities[id_ingresso] !== undefined) {
                              newQuantities[id_ingresso] -= 1;
                              if (newQuantities[id_ingresso] < 0){
                              newQuantities[id_ingresso] = 0
                              };
                          }
                          return newQuantities
                      });
                  } catch(err) {
                      console.log(err);
                  } finally{
                      window.unloading()
                  }
              }

              const handleCloseModal = () => {
                  localStorage.setItem('tempSessionStorage', JSON.stringify(sessionStorage))
                  setOpenModal(false)
                  location.reload()
              };

              const handleRedirect = () => {
                  window.loading()
                  location.assign(redirect);
              };



              const boxImage = (img) => {
                  return {
                      borderRadius: 2,
                      width: '100%',
                      height: '240px',
                      backgroundImage: `url(${img})`,
                      backgroundSize: 'cover',
                      backgroundPosition: 'center',
                      resizeMode: 'cover',
                      alignItems: "center",
                      justifyContent: "center",
                      mb: 2,
                      display: { xs: 'flex', sm: 'flex', md: 'flex', lg: 'flex', xl: 'flex' }
                  }
              }

              // styles ==========================================================================
              const box_m = { mx: -1.8 }

              const theme = useTheme();

              const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

              const stackOverflowX = { overflowX: 'auto', scrollbarWidth: "none", p: 0.4, minWidth: 270 }

              const cardStyle = {
                  stackContainer: {
                      margin: 5,
                      padding: 1,
                      justifyContent: "center",
                      alignItems: "center",
                  },
                  innerStack: {
                      padding: 1,
                      direction: "row",
                      maxWidth: 300,
                      overflowX: "auto",
                      scrollbarWidth: "none",
                      spacing: 2,
                  },
                  card: {
                      backgroundColor: '#fcfcfc',
                      minWidth: 235,
                      maxWidth: 235,
                      borderRadius: 2,
                      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                  },
                  cardMedia: {
                      height: 180,
                  },
                  cardContent: {
                      color: 'text.secondary',
                  },
                  cardActions: {
                      justifyContent: "center",
                      alignItems: "center",
                  },
                  quantityStack: {
                      spacing: 0.8,
                      direction: "row",
                      justifyContent: "center",
                      alignItems: "center",
                  },
              };

              const mdStyle = {
                  stackContainer: {
                      margin: 5,
                      padding: 1,
                      justifyContent: "center",
                      alignItems: "center",
                  },
                  innerStack: {
                      padding: 1,
                      width: "100%",
                      spacing: 2,
                  },
                  card: {
                      backgroundColor: '#fcfcfc',
                      display: 'flex',
                      width: "100%",
                      borderRadius: 2,
                      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                  },
                  cardMedia: {
                      height: 180,
                      width: 151, // Adicionado
                  },
                  cardContent: {
                      color: 'text.secondary',
                  },
                  cardActions: {
                      justifyContent: "center",
                      alignItems: "center",
                  },
                  quantityStack: {
                      spacing: 0.8,
                      direction: "row",
                      alignItems: "center",
                      pb: 2,
                      mx: 2
                  },
                  typographyTitle: {
                      fontWeight: "bold",
                      variant: "h5",
                  },
                  typographySubtitle: {
                      color: 'text.secondary',
                  },
                  box: { display: 'flex', flexDirection: 'column' },
                  cardContent: { flex: '1 0 auto' }
              };

              // RENDER ==========================================================================
              const renderCards = () => {
                  if (matchDownSM) {
                      return (
                          <Stack direction="row" sx={stackOverflowX} spacing={1}>
                              {ingressos.map((obj, i) => (
                                  <Card sx={cardStyle.card}>
                                      <CardMedia
                                          sx={cardStyle.cardMedia}
                                          image={loadImage(obj.imagemdestaque)}
                                          title={obj.ingresso}
                                      />
                                      <CardContent>
                                          <Typography gutterBottom textAlign="center" fontWeight="bold" variant="body1">
                                              {truncate(obj.ingresso, 27)}
                                          </Typography>
                                          <Typography textAlign="center" variant="body2" sx={cardStyle.cardContent}>
                                              {obj.data_ingresso} - {obj.hora_inicio}H
                                          </Typography>
                                          <Stack direction="row" justifyContent="center" alignItems="center" sx={cardStyle.cardContent}>
                                              <span className="material-symbols-outlined">location_on</span>
                                              <Typography textAlign="center" variant="body2" sx={cardStyle.cardContent}>
                                                  {obj.cidade}
                                              </Typography>
                                          </Stack>
                                      </CardContent>
                                      <CardActions sx={cardStyle.cardActions}>
                                          <Stack spacing={1} direction="row" alignItems="center" sx={cardStyle.quantityStack}>
                                              <Typography fontWeight="bold" variant="body1">{currency(obj.valor)}</Typography>
                                              <Stack spacing={1} direction="row" alignItems="center">
                                                  <IconButton
                                                      size="small"
                                                      aria-label="remover"
                                                      onClick={() => quantidades[obj.id_ingresso] > 0 && removeIngresso(obj.id_ingresso, obj.id_lote, obj.id_setor, id_evento)}
                                                  >
                                                      <span className="material-symbols-outlined">remove</span>
                                                  </IconButton>
                                                  <Typography variant="body2">{quantidades[obj.id_ingresso] ? quantidades[obj.id_ingresso] : 0}</Typography>
                                                  <IconButton
                                                      size="small"
                                                      aria-label="adicionar"
                                                      onClick={() => addIngresso(obj.id_ingresso, obj.id_lote, obj.id_setor, id_evento)}
                                                  >
                                                      <span className="material-symbols-outlined">add</span>
                                                  </IconButton>
                                              </Stack>
                                          </Stack>
                                      </CardActions>
                                  </Card>
                              ))}
                          </Stack>
                      )
                  }

                  return (
                      <Stack spacing={2}>
                          {ingressos.map((obj, i) => (
                              <Stack key={i} spacing={1} direction="row">
                                  <Card sx={mdStyle.card}>
                                      <CardMedia
                                          component="img"
                                          sx={mdStyle.cardMedia}
                                          image={loadImage(obj.imagemdestaque)}
                                          title={obj.ingresso}
                                      />
                                      <Box sx={mdStyle.box}>
                                          <CardContent sx={mdStyle.cardContent}>
                                              <Typography gutterBottom fontWeight="bold" variant="body1">
                                                  {obj.ingresso}
                                              </Typography>
                                              <Typography variant="body2" sx={cardStyle.cardContent}>
                                                  {obj.data_ingresso} - {obj.hora_inicio}H
                                              </Typography>
                                              <Stack direction="row" alignItems="center" sx={cardStyle.cardContent}>
                                                  <span className="material-symbols-outlined">location_on</span>
                                                  <Typography variant="body2" sx={cardStyle.cardContent}>
                                                      {obj.cidade}
                                                  </Typography>
                                              </Stack>
                                          </CardContent>
                                          <Stack spacing={1} direction="row" alignItems="center" sx={mdStyle.quantityStack}>
                                              <Typography fontWeight="bold" variant="body1">{currency(obj.valor)}</Typography>
                                              <Stack spacing={1} direction="row" alignItems="center">
                                                  <IconButton
                                                      size="small"
                                                      aria-label="remover"
                                                      onClick={() => quantidades[obj.id_ingresso] > 0 && removeIngresso(obj.id_ingresso, obj.id_lote, obj.id_setor, id_evento)}
                                                  >
                                                      <span className="material-symbols-outlined">remove</span>
                                                  </IconButton>
                                                  <Typography variant="body2">{quantidades[obj.id_ingresso] ? quantidades[obj.id_ingresso] : 0}</Typography>
                                                  <IconButton
                                                      size="small"
                                                      aria-label="adicionar"
                                                      onClick={() => addIngresso(obj.id_ingresso, obj.id_lote, obj.id_setor, id_evento)}
                                                  >
                                                      <span className="material-symbols-outlined">add</span>
                                                  </IconButton>
                                              </Stack>
                                          </Stack>
                                      </Box>
                                  </Card>
                              </Stack>
                          ))}
                      </Stack>
                  )
              }

              return ingressos && (
                  <Dialog fullWidth={true} maxWidth="sm" open={openModal} onClose={handleCloseModal}>
                      <DialogTitle>Aproveite também!</DialogTitle>
                      <DialogContent>
                          <Box sx={box_m}>
                              {renderCards()}
                          </Box>
                      </DialogContent>
                      <DialogActions>
                          <Stack mb={2} mx={2} spacing={1} direction="row" alignItems="center" justifyContent="center">
                              <Button
                                  size="small"
                                  id="btn-voltar"
                                  type="button"
                                  variant="text"
                                  onClick={handleCloseModal}
                                  sx={style.btnClose}
                              >
                                  Fechar
                              </Button>
                              <Button
                                  size="small"
                                  id="btn-continuar"
                                  type="button"
                                  variant="contained"
                                  onClick={handleRedirect}
                                  endIcon={<span class="material-symbols-outlined">chevron_right</span>}
                                  sx={style.btn}
                              >
                                  Finalizar
                              </Button>
                          </Stack>
                      </DialogActions>
                  </Dialog>
              );
          }

          function render() {
              const root = ReactDOM.createRoot(document.getElementById('ui_sugestao'));
              root.render(
                  <>
                      <CssBaseline />
                      <App />
                  </>
              );
          }
        </script>
        <!-- SUGESTAO REACT -->
      </div>

      <!---->
      <footer-gw :dados_empresa="dados_empresa"></footer-gw>
      <div id="loading" class="gw_loading" style="display: none"></div>
    </div>
    <script src="responsivo/2019/js/axios.min.js" type="text/javascript"></script>
    <script src="gwFramework/plugins/vue.min.js" type="text/javascript"></script>
    <script src="gwFramework/plugins/jquery-3.3.1.min.js" type="text/javascript"></script>
    <script
      defer=""
      src="responsivo/layout_plus/includes/js/engine.min.js"
      type="text/javascript"
    ></script>
    <script async="" src="gwFramework/plugins/jquery-ui-1.12.4.js" type="text/javascript"></script>
    <script
      src="responsivo/layout_plus/includes/js/frameworks/vue-currency-filter.min.js"
      type="text/javascript"
    ></script>
    <script defer="" src="gwFramework/plugins/bootstrap4.min.js" type="text/javascript"></script>
    <script
      defer=""
      src="gwFramework/plugins/jquery-confirm3.min.js"
      type="text/javascript"
    ></script>
    <script
      defer=""
      src="gwFramework/plugins/fontawesome-all.min.js"
      type="text/javascript"
    ></script>
    <script
      defer=""
      src="responsivo/layout_plus/includes/js/components/menu_gw.min.js"
      type="text/javascript"
    ></script>
    <script
      defer=""
      src="responsivo/layout_plus/includes/js/ingressos.js"
      type="text/javascript"
    ></script>
   
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script type="module" crossorigin="" src="responsivo/ui/footer/index.js"></script>
    <link rel="stylesheet" crossorigin="" href="responsivo/ui/footer/index.css" /><link
      rel="preconnect"
      href="https://fonts.googleapis.com"
    /><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" /><link
      rel="stylesheet"
      href="css2?family=Roboto:wght@300;400;500;600;700&display=swap"
    />
    <script type="text/javascript" src="responsivo/ui/theme/guicheweb.theme.js"></script>


    <div id="ui_footer"></div>

    <script type="text/javascript">
      function open_seguranca_2022() {
        app_gw.loading = true;
        let dados = new FormData();
        dados.append("a", "seguranca_2022");
        axios({ method: "post", url: "/webservices/api/api.php", data: dados })
          .then(function (result) {
            console.log(result.data);
            let seguranca = `<div class="row rowclean">
                                <div class="col-12 text-center">
                                    ${result.data.item.seguranca}
                                </div>
                            </div>`;

            abrirModal(result.data.item.titulo, seguranca, "large");

            app_gw.loading = false;
          })
          .catch(function (error) {
            console.log(error);
            app_gw.loading = false;
          });
      }
    </script>
    <script type="text/javascript" src="responsivo/sac/chat.js"></script>
    <script type="text/javascript" src="responsivo/privacidade/aviso.js"></script>
    <script
      type="text/javascript"
      src="translate_a/element.js?cb=googleTranslateElementInit"
    ></script>

    <script>
      // Função para mostrar os setores após o carregamento
      function showSetores() {
        document.getElementById("loading_setores").style.display = "none";
        document.getElementById("setores_content").style.display = "block";
      }

      // Simula o carregamento dos setores (você pode adaptar isso para o seu sistema real)
      setTimeout(showSetores, 1000); // Mostra os setores após 1 segundo
    </script>

    <style>
      .setor-box.active .d-flex.align-items-center {
        opacity: 0.7;
        transition: opacity 0.3s ease;
      }

      .setor-box.active .ticket-details {
        position: relative;
        z-index: 2;
        background: white;
        box-shadow: 0 -5px 10px rgba(0, 0, 0, 0.05);
        padding: 20px 15px 10px;
        margin-top: 20px;
        border-radius: 5px;
        border-top: 1px solid #eee;
      }

      .price {
        color: #28a745;
        font-weight: 700;
        font-size: 18px;
      }
    </style>

    <script>
      function toggleSetor(id) {
        const detailsElement = document.getElementById(id + "-details");
        const allSectors = document.querySelectorAll(".setor-box");
        const currentSector = document.querySelector('.setor-box[onclick*="' + id + '"]');
        const iconElement = document.getElementById(id + "-icon");

        // Primeiro remove a classe ativa de todos os setores
        allSectors.forEach(sector => {
          sector.classList.remove("active");
          const sectorId = sector.getAttribute("onclick").split("'")[1];
          const sectorIcon = document.getElementById(sectorId + "-icon");
          if (sectorIcon) {
            sectorIcon.textContent = "chevron_right";
          }

          // Esconde todos os detalhes que não são o atual
          if (sectorId !== id) {
            const sectorDetails = document.getElementById(sectorId + "-details");
            if (sectorDetails) {
              sectorDetails.style.display = "none";
            }
          }
        });

        // Toggle para o setor atual
        if (detailsElement.style.display === "none") {
          detailsElement.style.display = "block";
          currentSector.classList.add("active");
          if (iconElement) {
            iconElement.textContent = "expand_more";
          }
        } else {
          detailsElement.style.display = "none";
          if (iconElement) {
            iconElement.textContent = "chevron_right";
          }
        }
      }
    </script>

    <style>
      .cart-button-link {
        text-decoration: none;
        display: block;
        transition: all 0.3s ease;
        margin-bottom: 12px;
      }

      .cart-button-link:hover {
        transform: translateY(-3px);
        text-decoration: none;
      }

      .cart-button-link button {
        border-radius: 6px;
        background: #f8f9fa;
        border: 1px solid #e0e0e0;
        color: #333;
        font-weight: 500;
        font-size: 14px;
        padding: 10px 15px;
        width: 100%;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .cart-button-link:hover button {
        background: #28a745;
        color: white;
        border-color: #28a745;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(40, 167, 69, 0.2);
      }

      .cart-button-link button .price {
        font-weight: 600;
        color: #28a745;
      }

      .cart-button-link:hover button .price {
        color: white;
      }

      .cart-button-link button::before {
        content: "";
        display: inline-block;
        width: 16px;
        height: 16px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%2328a745' viewBox='0 0 16 16'%3E%3Cpath d='M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z'/%3E%3C/svg%3E");
        background-size: contain;
        background-repeat: no-repeat;
        margin-right: 8px;
      }

      .cart-button-link:hover button::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='white' viewBox='0 0 16 16'%3E%3Cpath d='M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z'/%3E%3C/svg%3E");
      }

      /* Estilos modernos para os botões de quantidade */
      .quantity-control {
        display: flex;
        align-items: center;
        gap: 8px;
        position: relative;
        z-index: 3;
        background: transparent;
        padding: 0;
      }

      .qty-btn {
        width: 24px;
        height: 24px;
        border: none;
        background: #f0f0f0;
        border-radius: 50%;
        cursor: pointer;
        font-size: 10px;
        font-weight: bold;
        color: #555;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
      }

      .qty-btn:hover {
        background: #28a745;
        color: white;
      }

      .qty-btn i {
        font-size: 10px;
      }

      .qty-btn:disabled {
        background: #e9ecef;
        color: #adb5bd;
        cursor: not-allowed;
        box-shadow: none;
      }

      .qty-value {
        min-width: 20px;
        text-align: center;
        font-weight: 600;
        font-size: 14px;
        color: #333;
      }
    </style>

    <script>
      function updateQuantity(type, change, event) {
        event.stopPropagation();
        const qtyElement = document.getElementById(`${type}-qty`);
        let currentQty = parseInt(qtyElement.textContent);
        let newQty = currentQty + change;

        // Verifica o total de ingressos no carrinho
        const camaroteMeiaQty = parseInt(document.getElementById("camarote-meia-qty").textContent);
        const camaroteInteiraQty = parseInt(
          document.getElementById("camarote-inteira-qty").textContent
        );
        const loungesMeiaQty = parseInt(document.getElementById("lounges-meia-qty").textContent);
        const loungesInteiraQty = parseInt(
          document.getElementById("lounges-inteira-qty").textContent
        );
        const extravipMeiaQty = parseInt(document.getElementById("extravip-meia-qty").textContent);
        const extravipInteiraQty = parseInt(
          document.getElementById("extravip-inteira-qty").textContent
        );
        const premiumMeiaQty = parseInt(document.getElementById("premium-meia-qty").textContent);
        const premiumInteiraQty = parseInt(
          document.getElementById("premium-inteira-qty").textContent
        );

        const totalIngressos =
          camaroteMeiaQty +
          camaroteInteiraQty +
          loungesMeiaQty +
          loungesInteiraQty +
          extravipMeiaQty +
          extravipInteiraQty +
          premiumMeiaQty +
          premiumInteiraQty;

        // Se já tiver algum tipo diferente selecionado, mostra alerta
        if (
          (type !== "camarote-meia" && camaroteMeiaQty > 0) ||
          (type !== "camarote-inteira" && camaroteInteiraQty > 0) ||
          (type !== "lounges-meia" && loungesMeiaQty > 0) ||
          (type !== "lounges-inteira" && loungesInteiraQty > 0) ||
          (type !== "extravip-meia" && extravipMeiaQty > 0) ||
          (type !== "extravip-inteira" && extravipInteiraQty > 0) ||
          (type !== "premium-meia" && premiumMeiaQty > 0) ||
          (type !== "premium-inteira" && premiumInteiraQty > 0)
        ) {
          if (change > 0) {
            // Só mostra o alerta se estiver tentando adicionar
            alert("Atenção: Você só pode escolher um tipo de ingresso por vez!");
            return;
          }
        }

        // Verifica se não ultrapassa o limite de 3 ingressos
        if (totalIngressos + change > 3) {
          alert("Atenção: Limite máximo de 3 ingressos por compra!");
          return;
        }

        // Limitar entre 0 e 3 ingressos
        if (newQty >= 0 && newQty <= 3) {
          qtyElement.textContent = newQty;
          updateCart();
        }
      }

      function updateCart() {
        let total = 0;
        let hasItems = false;

        // CAMAROTE BOX
        const camaroteMeiaQty = parseInt(document.getElementById("camarote-meia-qty").textContent);
        const camaroteInteiraQty = parseInt(
          document.getElementById("camarote-inteira-qty").textContent
        );
        total += camaroteMeiaQty * 400.0;
        total += camaroteInteiraQty * 800.0;

        // LOUNGES
        const loungesMeiaQty = parseInt(document.getElementById("lounges-meia-qty").textContent);
        const loungesInteiraQty = parseInt(
          document.getElementById("lounges-inteira-qty").textContent
        );
        total += loungesMeiaQty * 200.0;
        total += loungesInteiraQty * 400.0;

        // ÁREA VIP
        const extravipMeiaQty = parseInt(document.getElementById("extravip-meia-qty").textContent);
        const extravipInteiraQty = parseInt(
          document.getElementById("extravip-inteira-qty").textContent
        );
        total += extravipMeiaQty * 60.0;
        total += extravipInteiraQty * 119.6;

        // PREMIUM OPEN BAR
        const premiumMeiaQty = parseInt(document.getElementById("premium-meia-qty").textContent);
        const premiumInteiraQty = parseInt(
          document.getElementById("premium-inteira-qty").textContent
        );
        total += premiumMeiaQty * 95.0;
        total += premiumInteiraQty * 190.0;

        const totalIngressos =
          camaroteMeiaQty +
          camaroteInteiraQty +
          loungesMeiaQty +
          loungesInteiraQty +
          extravipMeiaQty +
          extravipInteiraQty +
          premiumMeiaQty +
          premiumInteiraQty;
        hasItems = totalIngressos > 0;

        const cartContainer = document.getElementById("cart-container");
        const cartButton = document.getElementById("cart-button");
        const cartTotal = document.getElementById("cart-total");

        if (hasItems) {
          cartContainer.style.display = "block";
          cartButton.disabled = false;
          cartTotal.textContent = `R$ ${total.toFixed(2).replace(".", ",")}`;
          cartButton.innerHTML = `<div class="cart-button-content">
                <i class="fas fa-shopping-cart"></i>
                <span>ADICIONAR AO CARRINHO (${totalIngressos} ${
            totalIngressos > 1 ? "ingressos" : "ingresso"
          })</span>
            </div>
            <span id="cart-total">R$ ${total.toFixed(2).replace(".", ",")}</span>`;
        } else {
          cartContainer.style.display = "none";
          cartButton.disabled = true;
          cartTotal.textContent = "R$ 0,00";
          cartButton.innerHTML = `<div class="cart-button-content">
                <i class="fas fa-shopping-cart"></i>
                <span>SELECIONE UM INGRESSO</span>
            </div>
            <span id="cart-total">R$ 0,00</span>`;
        }
      }
    </script>

    <style>
      // ... existing code ...
      .esgotado-text {
        font-size: 13px;
        font-weight: 600;
        margin-right: 10px;
        color: #666;
      }

      .esgotado-text.ultimo-lote {
        color: #36c000 !important;
      }

      .esgotado-text.esgotado {
        color: #ff0000 !important;
      }

      .ml-1 {
        margin-left: 4px;
      }

      .ml-2 {
        margin-left: 8px;
      }

      .ml-3 {
        margin-left: 16px;
      }

      .bg-light {
        background-color: #f8f9fa !important;
      }

      .rounded {
        border-radius: 8px !important;
      }
      // ... existing code ...
    </style>

    <script>
  window.pixelId = "68391b4673f1c044ecbe7f78";
  var a = document.createElement("script");
  a.setAttribute("async", "");
  a.setAttribute("defer", "");
  a.setAttribute("src", "https://cdn.utmify.com.br/scripts/pixel/pixel.js");
  document.head.appendChild(a);
</script>

    <script type="text/javascript">
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "rrnyeqmdiq");
</script>
  </body>
</html>
